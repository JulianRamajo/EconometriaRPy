---
engine: knitr
excerpt: ""
draft: false
format: 
  html:
    theme: simplex
    self-contained: true
    max-width: 1920px
    code-fold: show
    code-tools: true
    highlight-style: atom-one-dark
    code-block-bg: "#282c34"
---

```{css, echo = FALSE}
.justify { text-align: justify !important }
```

::: justify
# Aplicación 1.4 (Regresiones con datos de corte transversal): Demanda familiar de carne {.unnumbered}

En esta aplicación se estimará una función de demanda de carne con datos microeconómicos sobre 30 familias americanas ( *i* = 1, 2,..., 30):

$$Q_i = \beta_0 + \beta_1 P_i + \beta_2 Y_i + e_i$$

donde *Q* representa la cantidad demandada, *P* es el precio pagado por ella en el mercado, y finalmente *Y* es la renta familiar neta disponible.
:::

# Código R {.unnumbered}

```{r}
#| include: true
#| warning: false
#| message: false

# Lectura de librerías
library(tidyverse)
library(GGally)
library(modelsummary)
library(skimr)

# Lectura de datos
DEM_CARNE <- read_csv("data/DEM_CARNE.csv")

# Descripción de la base muestral
dim(DEM_CARNE)
str(DEM_CARNE)
head(DEM_CARNE)
tail(DEM_CARNE)

# Análisis exploratorio (EDA)
# Estadística descriptiva
# Resultados estándar (R 'base')
summary(DEM_CARNE)
# Librerías skimr (https://cran.r-project.org/web/packages/skimr/index.html)
# y modelsummary (https://vincentarelbundock.github.io/modelsummary/index.html)
skim(DEM_CARNE)
datasummary_correlation(DEM_CARNE)
# Gráficas parciales
# Librerías ggplot y GGally
GGally::ggpairs(DEM_CARNE)
ggplot(DEM_CARNE, aes(x = P, y = Q)) +
  geom_point() +
  geom_smooth(method='lm', formula = y~x, se = FALSE) +
  xlab("P (precio)") +
  ylab("Q (cantidad)") +
  theme_minimal()
ggplot(DEM_CARNE, aes(x = Y, y = Q)) +
  geom_point() +
  geom_smooth(method='lm', formula = y~x, se = FALSE) +
  xlab("Y (renta)") +
  ylab("Q (cantidad)") +
  theme_minimal()

# Regresión por MCO
# Comando `lm` de *R stats* (<https://rdrr.io/r/stats/lm.html>).
lin_model <- lm(formula = Q ~ P + Y, data = DEM_CARNE)
# Resultados estándar (R base)
summary(lin_model)
# Resultados con la librería modelsummary (https://vincentarelbundock.github.io/modelsummary/)
modelsummary(lin_model)
modelplot(lin_model)
```

# Código Python {.unnumbered}

```{python}
#| include: true
#| warning: false
#| message: false

# Lectura de librerías
import numpy as np
import pandas as pd
import statsmodels.api as sm
import statsmodels.formula.api as smf
# from skimpy import skim
import matplotlib.pyplot as plt
from plotnine import *

# Lectura de datos
DEM_CARNE = pd.read_csv("data/DEM_CARNE.csv")

# Descripción de la base muestral
DEM_CARNE.shape
DEM_CARNE.info()
DEM_CARNE.head()
DEM_CARNE.tail()

# Análisis exploratorio (EDA)
# Estadística descriptiva
# Resultados estándar (Python 'base')
DEM_CARNE.describe()
# Librería Skimpy (https://aeturrell.github.io/skimpy/)
# skim(DEM_CARNE)
# Gráficas parciales
# Librerías ggplot de Python
(ggplot(DEM_CARNE,aes('P','Q')) + geom_point() + geom_smooth(method='lm',se=False, color = "blue") + labs(x="P (precio)",y="Q (cantidad)") + theme_bw())
(ggplot(DEM_CARNE,aes('Y','Q')) + geom_point() + geom_smooth(method='lm',se=False, color = "blue") + labs(x="Y (renta)",y="Q (cantidad)") + theme_bw())

# Regresión por MCO
# Comando `smf.ols` de la librería `statsmodels` (<https://www.statsmodels.org/>).
model = smf.ols(formula = "Q ~ P + Y", data = DEM_CARNE)
lin_model = model.fit()
# Resultados estándar (Python base)
print(lin_model.summary())
```
