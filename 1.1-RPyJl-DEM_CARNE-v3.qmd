---
title: "TEMA 1: INTRODUCCIÓN A LA ECONOMETRÍA"
author: Julián Ramajo
excerpt: ""
draft: false
format: 
  html:
    theme: simplex
    self-contained: true
    max-width: 1920px
    code-fold: show
    code-tools: true
    highlight-style: atom-one-dark
    code-block-bg: "#282c34"
---

## Introducción

En esta aplicación se estimará una función de demanda de carne con datos micro sobre 30 familias americanas:

$$Q = f(P, Y) + e$$

donde *Q* representa la cantidad demandada, *P* es el precio pagado por ella en el mercado, y finalmente *Y* es la renta familiar neta disponible.

## Configuración

Inicialización de Python (`recitulate`) y Julia (`JuliaCall`) para poder ejecutar simulténeamente la aplicación en los tres lenguajes.

```{r}
library(reticulate)
use_python("/usr/local/bin/python3.10")
```

```{r}
library(JuliaCall)
julia_setup()
```

## Lectura de librerías (*packages*)

Librerías necesarias para la ejecución de la aplicación.

::: panel-tabset
## R

```{r}
library(tidyverse)
library(GGally)
library(skimr)
library(coefplot)
library(report)
```

## Python

```{python}
import numpy as np
import pandas as pd
import statsmodels.api as sm
import statsmodels.formula.api as smf
```

## Julia

```{julia}
using DataFrames, CSV, GLM, Econometrics, RegressionTables
```
:::

## Datos

Lectura y descripción de los datos.

::: panel-tabset
## R

Usando el `tidyverse` (<https://www.tidyverse.org/>).

```{r}
# Lectura y descripción de la base de datos
DEM_CARNE <- read_csv("DEM_CARNE.csv")
dim(DEM_CARNE)
str(DEM_CARNE)
head(DEM_CARNE)
tail(DEM_CARNE)
# Análisis exploratorio (EDA)
# Estadística descriptiva
summary(DEM_CARNE)
report(DEM_CARNE)
skim(DEM_CARNE)
# Gráficas parciales
GGally::ggpairs(DEM_CARNE)
ggplot(DEM_CARNE, aes(x = P, y = Q)) +
  geom_point(color = "blue") +
  geom_jitter(color = "blue") +
  geom_function(fun = function(x) {y = mean(DEM_CARNE$Q)}, linetype = "dotdash") +
  geom_smooth(method='lm', formula = y~x, se = FALSE, color = "red", linetype = "dashed") +
  xlab("P (precio)") +
  ylab("Q (cantidad)") +
  theme_minimal()
ggplot(DEM_CARNE, aes(x = Y, y = Q)) +
  geom_point(color = "blue") +
  geom_jitter(color = "blue") +
  geom_function(fun = function(x) {y = mean(DEM_CARNE$Q)}, linetype = "dotdash") +
  geom_smooth(method='lm', formula = y~x, se = FALSE, color = "red", linetype = "dashed") +
  xlab("Y (renta)") +
  ylab("Q (cantidad)") +
  theme_minimal()
```

## Python

Usando `pandas` (<https://pandas.pydata.org/>).

```{python}
# Lectura y descripción de la base de datos
DEM_CARNE = pd.read_csv("DEM_CARNE.csv")
DEM_CARNE.head()
DEM_CARNE.tail()
#  Estadística descriptiva
DEM_CARNE.describe()
```

## Julia

Usando `DataFrames` (<https://dataframes.juliadata.org/stable/>).

```{julia}
# Lectura y descripción de la base de datos
DEM_CARNE = CSV.read("DEM_CARNE.csv", DataFrame)
size(DEM_CARNE)
names(DEM_CARNE)
show(first(DEM_CARNE,6))
show(last(DEM_CARNE,6))
# Estadística descriptiva
show(describe(DEM_CARNE))
```
:::

## Regresiones por MCO

Se estimará por MCO el siguiente modelo lineal:

$$Q_i = \beta_0 + \beta_1 P_i + \beta_2 Y_i + e_i$$

::: panel-tabset
## R

Comando `lm` de *R stats* (<https://rdrr.io/r/stats/lm.html>).

```{r}
lin_model <- lm(formula = Q ~ P + Y, data = DEM_CARNE)
summary(lin_model)
```

## Python

Comando `smf.ols` de la librería `statsmodels` (<https://www.statsmodels.org/>).

```{python}
model = smf.ols(formula = "Q ~ P + Y", data = DEM_CARNE)
lin_model = model.fit()
print(lin_model.summary())
```

## Julia

Comando `lm` de la librería `GLM`(<https://juliastats.org/GLM.jl/>) de JuliaStats (<https://juliastats.org/>), el *statsverse* de Julia.

```{julia}
lin_model = lm(@formula(Q ~ P + Y), DEM_CARNE)
print("R^2 estándar ->   ",r2(lin_model))
regtable(lin_model)
```
:::

## Anexos

### Anexo 1: Regresión no lineal con R

```{r}
# R stats Nonlinear Least Squares
nonlin1_model <- nls(Q ~ c1 + c2*P + c3*(Y^c4), start = list(c1=5, c2=-0.5, c3=0.01, c4=3), data = DEM_CARNE)
summary(nonlin1_model)
# GSL Nonlinear Least-Squares 
library(gslnls)
nonlin2_model <- gsl_nls(Q ~ c1 + c2*P + c3*(Y^c4), start = c(c1=5, c2=-0.5, c3=0.01, c4=3), data = DEM_CARNE)
summary(nonlin2_model)
```

### Anexo 2: Regresión lineal Bayesiana con R

```{r}
# R model-fitting using Stan (via the rstan package) 
library(rstanarm)
linBayes1_model <- stan_glm(Q ~ P + Y, data = DEM_CARNE)
summary(linBayes1_model)
report(linBayes1_model)
# R-INLA (https://www.r-inla.org/) - BRINLA(Bayesian Regression with INLA).
library(INLA)
library(brinla)
linBayes2_model <- inla(Q ~ P + Y, family = "gaussian", data = DEM_CARNE)
summary(linBayes2_model)
bri.hyperpar.summary(linBayes2_model)
bri.fixed.plot(linBayes2_model)
bri.hyperpar.plot(linBayes2_model)
```
