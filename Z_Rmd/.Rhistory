import pandas as pd
flights = pd.read_csv("flights.csv")
flights = flights[flights['dest'] == "ORD"]
flights = flights[['carrier', 'dep_delay', 'arr_delay']]
flights = flights.dropna()
flights
import pandas as pd
flights = pd.read_csv("flights.csv")
flights = flights[flights['dest'] == "ORD"]
flights = flights[['carrier', 'dep_delay', 'arr_delay']]
flights = flights.dropna()
flights
print(r.flights.head(10))
import pandas as pd
import pandas as pd
flights = pd.read_csv("flights.csv")
flights = flights[flights['dest'] == "ORD"]
flights = flights[['carrier', 'dep_delay', 'arr_delay']]
flights = flights.dropna()
flights
import pandas
flights = pandas.read_csv("flights.csv")
flights = flights[flights['dest'] == "ORD"]
flights = flights[['carrier', 'dep_delay', 'arr_delay']]
flights = flights.dropna()
flights
print(r.flights.head(10))
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np
np.random.seed(0)
mu = 200
sigma = 25
x = np.random.normal(mu, sigma, size=100)
fig, (ax0, ax1) = plt.subplots(ncols=2, figsize=(8, 4))
ax0.hist(x, 20, density=1, histtype='stepfilled', facecolor='g', alpha=0.75)
ax0.set_title('stepfilled')
# Create a histogram by providing the bin edges (unequally spaced).
bins = [100, 150, 180, 195, 205, 220, 250, 300]
ax1.hist(x, bins, density=1, histtype='bar', rwidth=0.8)
ax1.set_title('unequal bins')
fig.tight_layout()
plt.show()
library(reticulate)
repl_python()
py_install("pandas-datareader")
repl_python()
install.packages(c("car", "effects", "ivreg", "lme4"))
install.packages("performance")
library(performance)
model1 <- lm(mpg ~ wt + cyl, data = mtcars)
model2 <- glm(am ~ wt + cyl, data = mtcars, family = binomial)
library(MASS)
data(housing)
model3 <- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)
library(lme4)
model4 <- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy)
library(brms)
model5 <- brm(mpg ~ wt + (1 | cyl) + (1 + wt | gear), data = mtcars)
install.packages("brm")
install.packages("brms")
check_heteroscedasticity(model1)
# defining a model
model <- lm(mpg ~ wt + am + gear + vs * cyl, data = mtcars)
# checking model assumptions
check_model(model)
install.packages("see")
# defining a model
model <- lm(mpg ~ wt + am + gear + vs * cyl, data = mtcars)
# checking model assumptions
check_model(model)
install.packages("qqplotr")
# defining a model
model <- lm(mpg ~ wt + am + gear + vs * cyl, data = mtcars)
# checking model assumptions
check_model(model)
install.packages(c("actuar", "autoplotly", "autostsm", "berryFunctions", "BGVAR", "bitops", "bookdown", "boot", "brio", "broom", "callr", "class", "cli", "clue", "cluster", "colorspace", "curl", "dbplyr", "dbscan", "DEoptim", "DescTools", "devtools", "diptest", "doBy", "dplyr", "DT", "ecm", "editData", "ellipsis", "esquisse", "exactRankTests", "formatR", "gamlss", "gh", "giscoR", "greybox", "GWmodel", "haven", "highr", "HLMdiag", "httpuv", "inum", "jquerylib", "KernSmooth", "knitr", "Lahman", "later", "lattice", "lwgeom", "magick", "mapsf", "MASS", "MASSExtra", "Matching", "Matrix", "mgcv", "mlr3misc", "modeltime", "muhaz", "multcomp", "nnet", "nycflights13", "odbc", "openssl", "parallelly", "pcaPP", "peopleanalyticsdata", "pillar", "pkgload", "processx", "R.cache", "raster", "rbibutils", "RcppArmadillo", "RcppParallel", "recipes", "remotes", "reprex", "reticulate", "rgl", "rlang", "Rmpfr", "RPostgres", "rsconnect", "RSQLite", "servr", "sfsmisc", "smcfcs", "spatial", "spatialreg", "spatstat", "spatstat.core", "spatstat.geom", "spdep", "splancs", "survival", "tibble", "tidymodels", "tidyselect", "tidyverse", "torch", "tsibble", "tune", "V8", "vctrs", "viridis", "viridisLite", "WDI", "withr", "WriteXLS", "xgboost"))
install.packages(c("actuar", "autoplotly", "autostsm", "berryFunctions", "BGVAR", "bitops", "bookdown", "boot", "brio", "broom", "callr", "class", "cli", "clue", "cluster", "colorspace", "curl", "dbplyr", "dbscan", "DEoptim", "DescTools", "devtools", "diptest", "doBy", "dplyr", "DT", "ecm", "editData", "ellipsis", "esquisse", "exactRankTests", "formatR", "gamlss", "gh", "giscoR", "greybox", "GWmodel", "haven", "highr", "HLMdiag", "httpuv", "inum", "jquerylib", "KernSmooth", "knitr", "Lahman", "later", "lattice", "lwgeom", "magick", "mapsf", "MASS", "MASSExtra", "Matching", "Matrix", "mgcv", "mlr3misc", "modeltime", "muhaz", "multcomp", "nnet", "nycflights13", "odbc", "openssl", "parallelly", "pcaPP", "peopleanalyticsdata", "pillar", "pkgload", "processx", "R.cache", "raster", "rbibutils", "RcppArmadillo", "RcppParallel", "recipes", "remotes", "reprex", "reticulate", "rgl", "rlang", "Rmpfr", "RPostgres", "rsconnect", "RSQLite", "servr", "sfsmisc", "smcfcs", "spatial", "spatialreg", "spatstat", "spatstat.core", "spatstat.geom", "spdep", "splancs", "survival", "tibble", "tidymodels", "tidyselect", "tidyverse", "torch", "tsibble", "tune", "V8", "vctrs", "viridis", "viridisLite", "WDI", "withr", "WriteXLS", "xgboost"))
library(reticulate)
miniconda_update()
py_install("scipy")
conda_python()
conda_version()
py_available()
py_config()
py_install("plotly")
repl_python()
install.packages(c("actuar", "Amelia", "autostsm", "BiocManager", "BMA", "brolgar", "bslib", "cachem", "caret", "corrplot", "cubature", "DataEditR", "dendextend", "DEoptim", "DEoptimR", "diagonals", "diptest", "dplyr", "e1071", "ecm", "effectsize", "eurostat", "fable", "fansi", "fields", "formatR", "greybox", "gt", "GWmodel", "h2o", "hms", "htmlTable", "httpuv", "inline", "insight", "ivreg", "jqr", "ks", "lamW", "leafem", "leafpop", "lme4", "Matrix", "parsnip", "performance", "pillar", "plot3D", "RcppArmadillo", "RcppParallel", "readstata13", "Rfast", "rhandsontable", "rmapshaper", "rmarkdown", "rsample", "rsconnect", "rversions", "sandwich", "sass", "see", "shape", "spdep", "statmod", "stochvol", "stringi", "systemfonts", "tibble", "tidycensus", "tigris", "viridis", "xaringan", "xfun"))
library(reticulate)
repl_python()
install.packages("tidyverse") install.packages("lubridate") install.packages("readxl") install.packages("highcharter") install.packages("tidyquant") install.packages("timetk") install.packages("tibbletime") install.packages("quantmod") install.packages("PerformanceAnalytics") install.packages("scales")
install.packages("tidyverse") , install.packages("lubridate") , install.packages("readxl") install.packages("highcharter") install.packages("tidyquant") install.packages("timetk") install.packages("tibbletime") install.packages("quantmod") install.packages("PerformanceAnalytics") install.packages("scales")
install.packages("tidyverse");  install.packages("lubridate");  install.packages("readxl"); install.packages("highcharter"); install.packages("tidyquant"); install.packages("timetk"); install.packages("tibbletime"); install.packages("quantmod"); install.packages("PerformanceAnalytics"); install.packages("scales")
library(tidyverse); library(lubridate); library(readxl); library(highcharter); library(tidyquant)
library(timetk); library(tibbletime); library(quantmod); library(PerformanceAnalytics); library(scales)
symbols <- c("SPY","EFA", "IJS", "EEM","AGG")
prices < getSymbols(symbols,src = 'yahoo', from = "2009-12-31", to = "2020-12-31", auto.assign = TRUE, warnings = FALSE) %>% map(~Ad(get(.))) %>% reduce(merge) %>% `colnames<-`(symbols)
View(AGG)
View(EEM)
View(SPY)
prices < getSymbols(symbols,src = 'yahoo', from = "2012-12-31", to = "2017-12-31", auto.assign = TRUE, warnings = FALSE) %>% map(~Ad(get(.))) %>% reduce(merge) %>% `colnames<-`(symbols)
prices < getSymbols(symbols,src = 'yahoo', from = "2009-12-31", to = "2020-12-31", auto.assign = TRUE, warnings = FALSE) %>% map(~Ad(get(.))) %>% reduce(merge) %>% `colnames<-`(symbols)
prices < reduce(merge) %>% `colnames<-`(symbols)
View(EEM)
View(AGG)
plot.xts(AGG$AGG.Adjusted)
install.packages(c("ade4", "Amelia", "autostsm", "bayesplot", "bayestestR", "BiocManager", "BMA", "broom", "corrplot", "DescTools", "devtools", "e1071", "fansi", "feasts", "finalfit", "forecast", "formatR", "ggdist", "ggplot2", "ggsignif", "greybox", "gtools", "GWmodel", "hts", "inline", "ks", "lamW", "manipulateWidget", "mapview", "Matrix", "matrixcalc", "matrixStats", "mgcv", "modeltime", "MSwM", "MTS", "mvtnorm", "np", "openxlsx", "optimx", "pander", "parallelly", "parameters", "plot3D", "plotly", "progressr", "proxy", "quantreg", "rbibutils", "RcppArmadillo", "Rdpack", "readstata13", "remotes", "rmarkdown", "robustbase", "rversions", "seasonal", "sf", "skedastic", "smcfcs", "spacetime", "spatstat.core", "spatstat.geom", "spatstat.utils", "spdep", "stars", "stochvol", "tensorflow", "testthat", "tfplot", "tinytex", "tmap", "torch", "units", "vdiffr", "xfun", "zip"))
install.packages(c("actuar", "colorspace", "fields", "glmnet", "Matrix", "mgcv", "spam"))
install.packages("ggplot2")
install.packages("tidyverse")
help update.packages()
help update.packages
?update.packages
update.packages()
install.packages(c("car", "greybox", "Matrix", "mgcv", "mlr3misc", "multicool", "sf"))
update.packages(checkBuilt = TRUE, ask = FALSE)
update.packages(checkBuilt = TRUE, ask = FALSE)
library(Amelia)
install.packages(c("autostsm", "cli", "compositions", "corrplot", "countrycode", "DataEditR", "datamods", "doBy", "Ecfun", "esquisse", "gargle", "ggfortify", "googledrive", "hardhat", "isoband", "ks", "mlr3misc", "modeldata", "MplusAutomation", "multicool", "parallelly", "pxweb", "ranger", "Rcpp", "rootSolve", "RPostgres", "seriation", "sf", "slider", "spatstat.geom", "stochvol", "stringi", "styler", "testthat", "wk"))
install.packages("xlsx")
install.packages(c("BGVAR", "blob", "blogdown", "cli", "compositions", "credentials", "earth", "ggdist", "ggtern", "googlesheets4", "jpeg", "mapping", "mlr3misc", "modeltime", "moderndive", "parallelly", "parsnip", "performance", "plotmo", "PxWebApiData", "ranger", "RcppArmadillo", "readr", "rgeoda", "rgl", "rpart.plot", "Rttf2pt1", "sf", "spatstat.core", "spatstat.linnet", "stringi", "survey", "tibble", "tune", "utf8", "VIM", "workflows", "workflowsets"))
# install.packages("remotes")
remotes::install_github("grantmcdermott/lecturenotes", dependencies = TRUE)
install.packages("utf8")
# install.packages("remotes")
remotes::install_github("grantmcdermott/lecturenotes")
# install.packages("remotes")
remotes::install_github("grantmcdermott/lecturenotes", force = TRUE)
tinytex::reinstall_tinytex()
setwd("~/Dropbox/Mi Mac (Mac Pro de Julián)/Documents/R-Python/RPy_Ramajo/ConsUSA")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, dpi=300)
#
library(tidyverse)
CONS_USA <- read_csv("CONS_USA.csv")
#
library(tidyverse)
CONS_USA <- read_csv("CONS_USA.csv")
#
ts_CONS_USA <- ts(CONS_USA[,2:3], start=c(1959), end = c(2015))
head(ts_CONS_USA)
CONS_USA %>%
ggplot(aes(x = Y, y = C)) +
geom_point() +
ylab("Consumo privado ($ million)") + xlab("Renta disponible ($ million)")
#
KEYNES_model <- lm (C ~ Y, data = ts_CONS_USA)
summary(KEYNES_model)
reticulate::repl_python()
