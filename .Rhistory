library(reticulate)
conda_python()
repl_python()
?conda_python()
conda_python()
python_version()
setwd("~/Dropbox/Mi Mac (Mac Pro de Julián)/Documents/GitHub/EconMetricsRPy")
conda_list()
conda_version()
py_config()
repl_python()
?par
install.packages(c("BGVAR", "car", "crosstalk", "estimatr", "gamlss.data", "gert", "glmnet", "glue", "gmp", "gsl", "igraph", "lmtest", "mclust", "modelsummary", "nloptr", "ragg", "RcppArmadillo", "runjags", "spatstat.core", "systemfonts", "tibble", "tinytex", "V8", "xfun"))
library(tidyverse)
library(stargazer)
library(lmtest)
library(splines)
library(skimr)
#
ENGEL_ALIM <- read_delim("ENGEL_ALIM_USA.csv", ";", escape_double = FALSE, trim_ws = TRUE)
#
# Estadísticos descriptivos
#
dim(ENGEL_ALIM)
head(ENGEL_ALIM)
summary(ENGEL_ALIM)
skimr(ENGEL_ALIM)
library(tidyverse)
library(stargazer)
library(lmtest)
library(splines)
library(skimr)
#
ENGEL_ALIM <- read_delim("ENGEL_ALIM_USA.csv", ";", escape_double = FALSE, trim_ws = TRUE)
#
# Estadísticos descriptivos
#
dim(ENGEL_ALIM)
head(ENGEL_ALIM)
summary(ENGEL_ALIM)
skim(ENGEL_ALIM)
#
# Diagrama de puntos (scatter plot) de las variables x e y
#
plot(ENGEL_ALIM$RENTA, ENGEL_ALIM$GALIM,
ylim=c(0, max(ENGEL_ALIM$GALIM)),
xlim=c(0, max(ENGEL_ALIM$RENTA)),
xlab="Renta",
ylab="Gasto en alimentos",
type = "p")
#
ggplot(ENGEL_ALIM, aes(x = RENTA, y = GALIM)) + geom_point() + scale_x_continuous(limits = c(350, 5000), expand = c(0, 0)) + theme_bw() + labs(x = "Renta", y = "Gasto en alimentos")
#
ggplot(ENGEL_ALIM, aes(x = RENTA, y = GALIM)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
+ scale_x_continuous(limits = c(350, 5000), expand = c(0, 0)) + theme_bw() + labs(x = "Renta", y = "Gasto en alimentos")
library(tidyverse)
library(stargazer)
library(lmtest)
library(splines)
library(skimr)
#
ENGEL_ALIM <- read_delim("ENGEL_ALIM_USA.csv", ";", escape_double = FALSE, trim_ws = TRUE)
#
# Estadísticos descriptivos
#
dim(ENGEL_ALIM)
head(ENGEL_ALIM)
summary(ENGEL_ALIM)
skim(ENGEL_ALIM)
#
# Diagrama de puntos (scatter plot) de las variables x e y
#
plot(ENGEL_ALIM$RENTA, ENGEL_ALIM$GALIM,
ylim=c(0, max(ENGEL_ALIM$GALIM)),
xlim=c(0, max(ENGEL_ALIM$RENTA)),
xlab="Renta",
ylab="Gasto en alimentos",
type = "p")
#
ggplot(ENGEL_ALIM, aes(x = RENTA, y = GALIM)) + geom_point() + scale_x_continuous(limits = c(350, 5000), expand = c(0, 0)) + theme_bw() + labs(x = "Renta", y = "Gasto en alimentos")
#
ggplot(ENGEL_ALIM, aes(x = RENTA, y = GALIM)) + geom_point() + geom_smooth(method = "lm", se = FALSE) + scale_x_continuous(limits = c(350, 5000), expand = c(0, 0)) + theme_bw() + labs(x = "Renta", y = "Gasto en alimentos")
#
# Estimación de una curva de Engel lineal por MCO
#
CURVA_ENGEL_LINEAL <- lm(GALIM ~ RENTA, data = ENGEL_ALIM)
# Resultados estándar
summary(CURVA_ENGEL_LINEAL)
# Resultados formateados
stargazer(CURVA_ENGEL_LINEAL, type = "text", title = "Resultados de la regresión lineal")
anova(CURVA_ENGEL_LINEAL)
#
coef(CURVA_ENGEL_LINEAL)
confint(CURVA_ENGEL_LINEAL)
#
# Gráficas de diagnóstico estándar de R
#
par(mfrow=c(2,2))
plot(CURVA_ENGEL_LINEAL)
par(mfrow=c(1,1))
#
# Predicción con el modelo de regresión simple
#
# Generar un vector que contiene los nuevos valores de las variables explicativa
new_RENTA <- data.frame(RENTA=c(400, 2000, 4500))
new_RENTA
# Predicción puntual
pred_GALIM <- predict(CURVA_ENGEL_LINEAL, new_RENTA)
names(pred_GALIM) <-c("Renta = 400", "2000", "4500")
pred_GALIM
# Predicción con intervalo de confianza
pred_GALIM <- predict(CURVA_ENGEL_LINEAL, new_RENTA, interval="confidence", level=0.95)
# Predicción del valor individual con intervalo de confianza
pred_GALIM <- predict(CURVA_ENGEL_LINEAL, new_RENTA, interval="prediction", level=0.95)
#
# GENERALIZACIÓN DEL MODELO
#
# Modelo cuadrático en la variable RENTA
#
waldtest(CURVA_ENGEL_LINEAL, . ~ . + I(RENTA^2))
CURVA_ENGEL_CUADRATICA <- lm(GALIM ~ RENTA + I(RENTA^2), data = ENGEL_ALIM)
summary(CURVA_ENGEL_CUADRATICA)
stargazer(CURVA_ENGEL_CUADRATICA, type = "text", title = "Resultados de la regresión cuadrática")
#
# Modelo semiparamétrico
#
CURVA_ENGEL_SEMIPARAMETRICA <- lm(GALIM ~ bs(RENTA, df = 5) , data = ENGEL_ALIM)
summary(CURVA_ENGEL_SEMIPARAMETRICA)
# Elección de df
# bs <- lapply(3:10, function(i) lm(GALIM ~ bs(RENTA, df = i) , data = ENGEL_ALIM))
# structure(sapply(bs, AIC, k = log(nrow(engel))), .Names = 3:10)
#
par(mar = c(5, 5, 2, 4))
Engel_sim <- data.frame(RENTA = 350:5000)
Engel_sim$GALIMhat1 <- predict(CURVA_ENGEL_CUADRATICA, newdata = Engel_sim)
Engel_sim$GALIMhat2 <- predict(CURVA_ENGEL_SEMIPARAMETRICA, newdata = Engel_sim)
plot(GALIM ~ jitter(RENTA, factor = 3), pch = 19, cex = 1.5, col = rgb(0.5, 0.5, 0.5, alpha = 0.02), data = ENGEL_ALIM)
lines(GALIMhat1 ~ RENTA, data = Engel_sim, lty = 2)
lines(GALIMhat2 ~ RENTA, data = Engel_sim)
legend("topleft", c("Regresión cuadrática", "Regresión spline"),
lty = c(2, 1), bty = "n")
#
stargazer(CURVA_ENGEL_SEMIPARAMETRICA, type = "text", title = "Resultados de la regresión spline")
reticulate::repl_python()
