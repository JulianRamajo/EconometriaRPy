install.packages("reticulate")
library(reticulate)
install.packages("reticulate")
install.packages("tidyverse")
library(reticulate)
use_python("/usr/local/bin/python")
repl_python()
Y
repl_python()
install.packages("reticulate")
library(reticulate)
repl_python()
install.packages(c("autostsm", "cli", "corrplot", "DataEditR", "datamods", "doBy", "Ecfun", "esquisse", "gargle", "ggfortify", "googledrive", "greybox", "isoband", "ks", "Matrix", "mgcv", "mlr3misc", "MplusAutomation", "multicool", "parallelly", "pxweb", "rootSolve", "RPostgres", "seriation", "sf", "slider", "spatstat.geom", "stochvol", "styler", "testthat", "wk"))
install.packages("easystats", repos = "https://easystats.r-universe.dev")
install.packages("tidyverse")
install.packages('modelsummary')
library(modelsummary)
mod <- lm(y ~ x, dat)
modelsummary(mod)
library(modelsummary)
url <- 'https://vincentarelbundock.github.io/Rdatasets/csv/HistData/Guerry.csv'
dat <- read.csv(url)
dat$Small <- dat$Pop1831 > median(dat$Pop1831)
View(dat)
View(dat)
mod <- lm(Crime_prop ~ Literary, dat)
modelsummary(mod)
mod <- lm(Crime_prop ~ Literacy, dat)
modelsummary(mod)
datasummary_skim(dat)
models <- list(
"OLS 1"     = lm(Donations ~ Literacy + Clergy, data = dat),
"Poisson 1" = glm(Donations ~ Literacy + Commerce, family = poisson, data = dat),
"OLS 2"     = lm(Crime_pers ~ Literacy + Clergy, data = dat),
"Poisson 2" = glm(Crime_pers ~ Literacy + Commerce, family = poisson, data = dat),
"OLS 3"     = lm(Crime_prop ~ Literacy + Clergy, data = dat)
)
modelsummary(models)
modelplot(mod)
modelplot(OLS 1)
install.packages("ggeffects")
install.packages("ggstatsplot")
install.packages(c("BGVAR", "cli", "compositions", "countrycode", "earth", "ggdist", "hardhat", "mlr3misc", "modeldata", "modeltime", "paletteer", "parallelly", "parsnip", "performance", "plotmo", "PxWebApiData", "ranger", "RcppArmadillo", "readr", "rgeoda", "sf", "spatstat.core", "spatstat.linnet", "stochvol", "stringi", "survey", "workflows", "WRS2"))
installed_packages <- as.data.frame(installed.packages())
View(installed_packages)
library(xlsx)
library(forecast)
library(tseries)
library(strucchange)
install.packages("xlsx")
library(xlsx)
library(forecast)
library(tseries)
library(strucchange)
library(xlsx)
library(forecast)
library(tseries)
library(strucchange)
## load the data from a CSV or Excel file. This example is done with an Excel sheet.
prod_df <- read.xlsx(file = 'agricultural_productivity.xls', sheetIndex = 'Sheet1', rowIndex = 8:65, colIndex = 2, header = FALSE)
colnames(prod_df) <- c('Rice')
setwd("~/Downloads")
## load the data from a CSV or Excel file. This example is done with an Excel sheet.
prod_df <- read.xlsx(file = 'agricultural_productivity.xls', sheetIndex = 'Sheet1', rowIndex = 8:65, colIndex = 2, header = FALSE)
colnames(prod_df) <- c('Rice')
View(prod_df)
## store rice data as time series objects
rice <- ts(prod_df$Rice, start=c(1951, 1), end=c(2008, 1), frequency=1)
# store the breakpoints
bp.rice <- breakpoints(rice ~ 1)
summary(bp.rice)
## the BIC chooses 5 breakpoints; plot the graph with breakdates and their confidence intervals
plot(bp.rice)
plot(rice)
lines(bp.rice)
## confidence intervals
ci.rice <- confint(bp.rice)
ci.rice
lines(ci.rice)
setwd("~/Dropbox/Mi Mac (Mac Pro de Julián)/Documents/GitHub/EcoMetricsRPy")
#
library(tidyverse)
CONS_USA <- read_csv("CONS_USA.csv")
View(CONS_USA)
View(CONS_USA)
ts_CONS_USA <- ts(CONS_USA[,2:3], start=c(1959), end = c(2015))
head(ts_CONS_USA)
CONS_USA %>%
ggplot(aes(x = Y, y = C)) +
geom_point() +
ylab("Consumo privado ($ million)") + xlab("Renta disponible ($ million)")
#
KEYNES_model <- lm (C ~ Y, data = ts_CONS_USA)
summary(KEYNES_model)
bp.cons <- breakpoints(C ~ Y, data = ts_CONS_USA)
summary(bp.cons)
plot(bp.cons)
plot(ts_CONS_USA$C)
lines(bp.cons)
lines(bp.cons)
C <- ts(CONS_USA$C, start=c(1959, 1), end=c(2015, 1), frequency=1)
plot(bp.cons)
plot(C)
lines(bp.cons)
## confidence intervals
ci.cons <- confint(bp.cons)
ci.cons
lines(ci.cons)
View(KEYNES_model)
plot(KEYNES_model)
plot(KEYNES_model$residuals)
install.packages(c("BGVAR", "blob", "blogdown", "earth", "ggtern", "googlesheets4", "mapping", "moderndive", "rgeoda", "rgl", "Rttf2pt1", "sf", "tibble", "tune", "VIM", "workflowsets"))
setwd("~/Dropbox/Mi Mac (Mac Pro de Julián)/Documents/GitHub/EcoMetricsRPy")
library(tidyverse)
CONS_USA <- read_csv("CONS_USA.csv")
ts_CONS_USA <- ts(CONS_USA[,2:3], start=c(1959), end = c(2015))
#
CONS_USA %>%
ggplot(aes(x = Y, y = C)) +
geom_point() +
ylab("Consumo privado ($ million)") + xlab("Renta disponible ($ million)")
#
KEYNES_model <- lm (C ~ Y, data = ts_CONS_USA)
summary(KEYNES_model)
bp.cons <- breakpoints(C ~ Y, data = ts_CONS_USA)
summary(bp.cons)
library(strucchange)
bp.cons <- breakpoints(C ~ Y, data = ts_CONS_USA)
summary(bp.cons)
C <- ts(CONS_USA$C, start=c(1959, 1), end=c(2015, 1), frequency=1)
plot(bp.cons)
plot(C)
lines(bp.cons)
#
ci.cons <- confint(bp.cons)
ci.cons
lines(ci.cons)
#
## Lectura de datos
#
library(readr)
VENTAS <- read_csv("VENTAS_SUPER.csv")
dim(VENTAS)
VENTAS
summary(VENTAS)
#
## Matriz de diagrama de puntos de las variables
#
library(alr4)
scatterplotMatrix(~ V + P + A, id=list(n=3), smooth=list(span=0.75), data=VENTAS)
#
## Modelo econométrico
#
modelo.ventas.1 <- lm(V ~ P + A, data=VENTAS)
S(modelo.ventas.1)
confint(modelo.ventas.1, level=.95)
plot(allEffects(modelo.ventas.1), grid=TRUE, rug=TRUE)
# Diagnósticos de la regresión
#
## Validación global de las hipótesis del MRL
#
library(gvlma)
gvmodel <- gvlma(modelo.ventas.1)
summary(gvmodel)
plot(gvmodel)
library(performance)
model_performance(modelo.ventas.1)
check_model(modelo.ventas.1)
# Modelo alternativo
#
modelo.ventas.2 <- lm(V ~ P + A + I(A^2), data=VENTAS)
S(modelo.ventas.2)
confint(modelo.ventas.2, level=.95)
plot(Effect("P", modelo.ventas.2))
plot(Effect("A", modelo.ventas.2))
compareCoefs(modelo.ventas.1, modelo.ventas.2)
anova(modelo.ventas.1, modelo.ventas.2)
#
plot(allEffects(modelo.ventas.1), grid=TRUE, rug=TRUE)
plot(allEffects(modelo.ventas.2), grid=TRUE, rug=TRUE)
compare_performance(modelo.ventas.1, modelo.ventas.2)
compare_performance(modelo.ventas.1, modelo.ventas.2, rank = TRUE)
plot(compare_performance(modelo.ventas.1, modelo.ventas.2, rank = TRUE))
test_performance(modelo.ventas.1, modelo.ventas.2, rank = TRUE)
test_performance(modelo.ventas.1, modelo.ventas.2)
test_bf(modelo.ventas.1, modelo.ventas.2)
test_wald(modelo.ventas.1, modelo.ventas.2)
test_vuong(modelo.ventas.1, modelo.ventas.2)
