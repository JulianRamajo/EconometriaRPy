CONS_ESP$dl_NFWR = c(NA,100*diff(log(CONS_ESP$NFWR)))
CONS_ESP$dl_HCOCR = c(NA,100*diff(log(CONS_ESP$HCOCR)))
CONS_ESP$d_ERX = c(NA,100*diff(CONS_ESP$ERX))
#
CONS_ESP_tbl_ts <-  CONS_ESP %>%  mutate(YearQuarter = yearquarter(date)) %>% as_tsibble(index = YearQuarter)
class(CONS_ESP)
class(CONS_ESP_ts)
class(CONS_ESP_tbl_ts)
#
modelo_lp_2 <- CONS_ESP_tbl_ts %>% model(tslm = TSLM(log(PCR) ~ log(HDYR) + log(FWR) + log(NFWR) + log(HCOCR)))
report(modelo_lp_2 )
#
View(CONS_ESP)
View(CONS_ESP_ts)
View(CONS_ESP_tbl_ts)
CONS_ESP$d_ERX = c(NA,diff(CONS_ESP$ERX))
#
CONS_ESP_tbl_ts <-  CONS_ESP %>%  mutate(YearQuarter = yearquarter(date)) %>% as_tsibble(index = YearQuarter)
class(CONS_ESP_tbl_ts)
View(CONS_ESP_tbl_ts)
#
modelo_lp_2 <- CONS_ESP_tbl_ts %>% model(tslm = TSLM(log(PCR) ~ log(HDYR) + log(FWR) + log(NFWR) + log(HCOCR)))
report(modelo_lp_2 )
#
summary(dynlm (d(log(PCR)) ~ d(log(HDYR)) + d(log(CPE)) + d(ERX) + L(modelo_lp$residuals), data = CONS_ESP_ts))
summary(dynlm (d(log(PCR)) ~ d(log(HDYR)) + d(log(CPE)) + d(ERX), data = CONS_ESP_ts))
report(CONS_ESP_tbl_ts %>% model(tslm = TSLM(dl_PCR ~ dl_HDYR + dl_CPE + d_ERX)))
modelo_cp_2 <- CONS_ESP_tbl_ts %>% left_join(residuals(modelo_lp_2), by = "YearQuarter") %>% model(tslm = TSLM(dl_PCR ~ dl_HDYR + dl_CPE + d_ERX + .resid))
report(modelo_cp_2)
report(CONS_ESP_tbl_ts %>% left_join(residuals(modelo_lp_2), by = "YearQuarter") %>% model(tslm = TSLM(dl_PCR ~ dl_HDYR + dl_CPE + d_ERX + lag(.resid))
)
rm(list = ls())
#
library(tidyverse)
library(dynlm)
#
CONS_ESP <- read_csv("CONS_ESP.csv")
class(CONS_ESP)
#
CONS_ESP_ts <- ts(CONS_ESP[,2:8], start=c(1995,1), end = c(2017,4), frequency = 4)
class(CONS_ESP_ts)
plot(CONS_ESP_ts)
#
# Modelo Keynesiano de consumo (MCE con separación de corto y largo plazo)
#
modelo_lp <- dynlm (log(PCR) ~ log(HDYR) + log(FWR) + log(NFWR) + log(HCOCR), data = CONS_ESP_ts)
summary(modelo_lp)
#
modelo_cp <- dynlm (d(log(PCR)) ~ d(log(HDYR)) + d(log(CPE)) + d(ERX) + L(modelo_lp$residuals), data = CONS_ESP_ts)
summary(modelo_cp)
#
library(fpp3)
#
CONS_ESP$dl_PCR = c(NA,diff(log(CONS_ESP$PCR)))
CONS_ESP$dl_HDYR = c(NA,diff(log(CONS_ESP$HDYR)))
CONS_ESP$dl_FWR = c(NA,diff(log(CONS_ESP$FWR)))
CONS_ESP$dl_CPE = c(NA,diff(log(CONS_ESP$CPE)))
CONS_ESP$dl_NFWR = c(NA,diff(log(CONS_ESP$NFWR)))
CONS_ESP$dl_HCOCR = c(NA,diff(log(CONS_ESP$HCOCR)))
CONS_ESP$d_ERX = c(NA,diff(CONS_ESP$ERX))
#
CONS_ESP_tbl_ts <-  CONS_ESP %>%  mutate(YearQuarter = yearquarter(date)) %>% as_tsibble(index = YearQuarter)
class(CONS_ESP_tbl_ts)
#
modelo_lp_2 <- CONS_ESP_tbl_ts %>% model(tslm = TSLM(log(PCR) ~ log(HDYR) + log(FWR) + log(NFWR) + log(HCOCR)))
report(modelo_lp_2 )
#
modelo_cp_2 <- CONS_ESP_tbl_ts %>% left_join(residuals(modelo_lp_2), by = "YearQuarter") %>%
model(tslm = TSLM(dl_PCR ~ dl_HDYR + dl_CPE + d_ERX + lag(.resid)))
report(modelo_cp_2)
#
rm(list = ls())
prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv")
View(prison)
rm(list = ls())
#
library(tidyverse)
library(dynlm)
#
CONS_ESP <- read_csv("CONS_ESP.csv")
class(CONS_ESP)
View(CONS_ESP)
#
library(fpp3)
#
CONS_ESP$dl_PCR = c(NA,diff(log(CONS_ESP$PCR)))
CONS_ESP$dl_HDYR = c(NA,diff(log(CONS_ESP$HDYR)))
CONS_ESP$dl_FWR = c(NA,diff(log(CONS_ESP$FWR)))
CONS_ESP$dl_CPE = c(NA,diff(log(CONS_ESP$CPE)))
CONS_ESP$dl_NFWR = c(NA,diff(log(CONS_ESP$NFWR)))
CONS_ESP$dl_HCOCR = c(NA,diff(log(CONS_ESP$HCOCR)))
CONS_ESP$d_ERX = c(NA,diff(CONS_ESP$ERX))
#
CONS_ESP_tbl_ts <-  CONS_ESP %>%  mutate(YearQuarter = yearquarter(date)) %>% select(-date) %>% as_tsibble(index = YearQuarter)
class(CONS_ESP_tbl_ts)
View(CONS_ESP)
View(CONS_ESP_tbl_ts)
CONS_ESP_tbl_ts %>%
select(-dl_PCR, -dl_HDYR, -dl_FWR, -dl_CPE, -dl_NFWR, dl_HCOCR) %>%
pivot_longer(-YearQuarter) %>%
ggplot(aes(YearQuarter, value, color = name)) +
geom_line() +
facet_grid(name ~ ., scales = "free_y") +
guides(colour = "none") +
labs(y="% change")
View(CONS_ESP_tbl_ts)
CONS_ESP_tbl_ts %>%
select(-dl_PCR, -dl_HDYR, -dl_FWR, -dl_CPE, -dl_NFWR, -dl_HCOCR, -d_ERX) %>%
pivot_longer(-YearQuarter) %>%
ggplot(aes(YearQuarter, value, color = name)) +
geom_line() +
facet_grid(name ~ ., scales = "free_y") +
guides(colour = "none") +
labs(y="Index")
View(CONS_ESP_tbl_ts)
#
CONS_ESP_tbl_ts %>%
select(-PCR, -HDYR, -FWR, -CPE, -NFWR, -HCOCR, -ERX) %>%
pivot_longer(-YearQuarter) %>%
ggplot(aes(YearQuarter, value, color = name)) +
geom_line() +
facet_grid(name ~ ., scales = "free_y") +
guides(colour = "none") +
labs(y="Change")
View(CONS_ESP_tbl_ts)
#
CONS_ESP_tbl_ts %>%
GGally::ggpairs(columns = 1:7)
#
CONS_ESP_tbl_ts %>%
GGally::ggpairs(columns = 8:14)
#
modelo_lp_2 <- CONS_ESP_tbl_ts %>% model(tslm = TSLM(log(PCR) ~ log(HDYR) + log(FWR) + log(NFWR) + log(HCOCR)))
report(modelo_lp_2 )
#
modelo_cp_2 <- CONS_ESP_tbl_ts %>% left_join(residuals(modelo_lp_2), by = "YearQuarter") %>%
model(tslm = TSLM(dl_PCR ~ dl_HDYR + dl_CPE + d_ERX + lag(.resid)))
report(modelo_cp_2)
#
augment(modelo_cp_2) %>%
ggplot(aes(x = YearQuarter)) +
geom_line(aes(y = dl_PCR, colour = "Valores observados")) +
geom_line(aes(y = .fitted, colour = "Valores estimados")) +
labs(y = NULL, title = "Cambio en el consumo privado en España") +
scale_colour_manual(values=c(Data="black",Fitted="#D55E00")) +
guides(colour = guide_legend(title = NULL))
#
augment(modelo_cp_2) %>%
ggplot(aes(x = YearQuarter)) +
geom_line(aes(y = dl_PCR, colour = "Data")) +
geom_line(aes(y = .fitted, colour = "Fitted")) +
labs(y = NULL, title = "Cambio en el consumo privado en España") +
scale_colour_manual(values=c(Data="black",Fitted="#D55E00")) +
guides(colour = guide_legend(title = NULL))
#
augment(modelo_cp_2) %>%
ggplot(aes(x = YearQuarter)) +
geom_line(aes(y = dl_PCR, colour = "Observado")) +
geom_line(aes(y = .fitted, colour = "Estimado")) +
labs(y = NULL, title = "Cambio en el consumo privado en España") +
scale_colour_manual(values=c(Observado="black",Estimado="#D55E00")) +
guides(colour = guide_legend(title = NULL))
#
# Errores del modelo
modelo_cp_2 %>% gg_tsresiduals()
#
help("TVadverts", package = "fpp3")
??TVadverts
help("fpp3")
insurance %>%
ggplot(aes(x=TVadverts, y=Quotes)) + geom_point()
insurance %>%
pivot_longer(Quotes:TVadverts) %>%
ggplot(aes(x = Month, y = value)) +
geom_line() +
facet_grid(vars(name), scales = "free_y") +
labs(y = "", title = "Insurance advertising and quotations")
rm(list = ls())
TVadverts
insurance
class(insurance)
SEGUROS_USA <- insurance
View(SEGUROS_USA)
class(SEGUROS_USA)
?write
?write_csv
write_csv(SEGUROS_USA, "SEGUROS_USA.CSV")
library(readr)
SEGUROS_USA <- read_csv("SEGUROS_USA.CSV")
View(SEGUROS_USA)
class(SEGUROS_USA)
insurance %>%
pivot_longer(Quotes:TVadverts) %>%
ggplot(aes(x = Month, y = value)) +
geom_line() +
facet_grid(vars(name), scales = "free_y") +
labs(y = "", title = "Insurance advertising and quotations")
insurance %>%
ggplot(aes(x=TVadverts, y=Quotes)) + geom_point()
insurance %>%
ggplot(aes(x=TVadverts, y=Quotes)) + geom_point() + stat_smooth(method = lm)
?rename()
INSURANCE_USA <- SEGUROS_USA
View(SEGUROS_USA)
View(INSURANCE_USA)
rm(list = ls())
fit <- insurance %>%
# Restrict data so models use same fitting period
mutate(Quotes = c(NA, NA, NA, Quotes[4:40])) %>%
# Estimate models
model(
lag0 = TSLM(Quotes ~ TVadverts),
lag1 = TSLM(Quotes ~ TVadverts + lag(TVadverts)),
lag2 = TSLM(Quotes ~ TVadverts + lag(TVadverts) + lag(TVadverts, 2)),
lag3 = TSLM(Quotes ~ TVadverts + lag(TVadverts) + lag(TVadverts, 2) + lag(TVadverts, 3))
)
glance(fit)
report(insurance %>% TSLM(Quotes ~ TVadverts))
report( insurance %>% model(TSLM(Quotes ~ TVadverts)) )
report( insurance %>% model(TSLM(Quotes ~ TVadverts + lag(TVadverts))) )
report( insurance %>% model(TSLM(Quotes ~ TVadverts + lag(TVadverts) + lag(TVadverts, 2))) )
report( insurance %>% model(TSLM(Quotes ~ TVadverts + lag(TVadverts) + lag(TVadverts, 2) + lag(TVadverts, 3))) )
library(fable.prophet)
install.packages("fable.prophet")
library(fable.prophet)
str(aus_production)
rm(fit)
str(aus_production)
AUS_PROD <- aus_production
View(AUS_PROD)
cement <- aus_production
train <- cement %>%
filter(year(Quarter) <= 2008)
fit <- train %>%
model(
arima = ARIMA(Cement),
ets = ETS(Cement),
prophet = prophet(Cement ~ season(period = 4, order = 2,
type = "multiplicative"))
)
View(train)
View(fit)
fc <- fit %>% forecast(h = "1 year 6 months")
fc %>% autoplot(cement)
fc %>% accuracy(cement)
ELEC_ASU <-  elec
load("~/OneDrive - Universidad de Extremadura/2 - DOCENCIA/0 - ECONOMETRÍA/1 - ECONOMETRÍA CON R -PYTHON-JULIA/_GitHub-EconMetricsRPy/Z_APPS_COMP/DEM_ELEC.RData")
View(elec_half_hourly)
elec_half_hourly
elec_half_hourly %>%
autoplot(Demand) +
labs(title = "Demanda de electricidad (cada media hora)", subtitle = "Victoria-Australia")
head(elec_half_hourly)
View(elec_half_hourly)
tail(elec_half_hourly)
rm(list=ls())
vic_elec %>%
pivot_longer(Demand:Temperature, names_to = "Series") %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
facet_grid(rows = vars(Series), scales = "free_y") +
labs(y = "")
elec <- vic_elec %>%
mutate(
DOW = wday(Date, label = TRUE),
Working_Day = !Holiday & !(DOW %in% c("Sat", "Sun")),
Cooling = pmax(Temperature, 18)
)
View(elec)
elec <- vic_elec %>%
mutate(
Dia_sem = wday(Date, label = TRUE),
Dia_lab = !Holiday & !(Dia_sem %in% c("sáb", "dom")),
Frio = pmax(Temperature, 18), Calor=pmin(Temperature, 25)
)
View(elec)
elec <- vic_elec %>%
mutate(
Dia_sem = wday(Date, label = TRUE),
Dia_lab = !Holiday & !(Dia_sem %in% c("sáb", "dom")),
Frio = (Temperature < 18), Calor= (Temperature > 28)
)
View(elec)
write_csv(elec, "ELEC_AUS.csv")
View(elec)
?write
save(elec, file = "ELEC_VICT_AUS.RData")
View(GastoAlim)
rm(GastoAlim)
load("~/OneDrive - Universidad de Extremadura/2 - DOCENCIA/0 - ECONOMETRÍA/1 - ECONOMETRÍA CON R -PYTHON-JULIA/_GitHub-EconMetricsRPy/ELEC_VICT_AUS.RData")
View(elec)
rename(elec, Demanda=Demand)
?rename
??
rename
library(tidyverse)
rename(elec, Demanda=Demand)
rename(elec, Temperatura=Temperature)
View(elec)
rename(elec, Demanda=Demand)
View(elec)
rename(elec, Demanda=Demand, Temperatura=Temperature)
View(elec)
dem_elec_vict <-  rename(elec, Demanda=Demand, Temperatura=Temperature, Fiesta=Holiday)
View(dem_elec_vict)
elec %>%
ggplot(aes(x=Temperature, y=Demand, col=Working_Day)) +
geom_point(alpha = 0.6) +
labs(x="Temperature (degrees Celsius)", y="Demand (MWh)")
View(elec)
library(fpp3)
elec %>%
ggplot(aes(x=Temperature, y=Demand, col=Dia_lab)) +
geom_point(alpha = 0.6) +
labs(x="Temperatura (degrees Celsius)", y="Demanda (MWh)")
View(dem_elec_vict)
rm(elec)
View(dem_elec_vict)
save(dem_elec_vict, file = "DEM_ELEC.RData")
dem_elec_vict
class(dem_elec_vict)
?load
rm(dem_elec_vict)
#
library(tidyverse)
library(fpp3)
load("DEM_ELEC.RData")
class(dem_elec_vict)
View(dem_elec_vict)
dem_elec_vict %>%
autoplot(Demand) +
labs(title = "Demanda de electricidad (cada media hora, en MW)", subtitle = "Victoria-Australia")
#
dem_elec_vict %>%
autoplot(Demanda) +
labs(title = "Demanda de electricidad (cada media hora, en MW)", subtitle = "Victoria-Australia")
#
dem_elec_vict %>% gg_season(Demand, period="day") + theme(legend.position = "none")
dem_elec_vict %>% gg_season(Demand, period="week") + theme(legend.position = "none")
dem_elec_vict %>% gg_season(Demand, period="year")
#
dem_elec_vict %>%
autoplot(Demanda) +
labs(title = "Demanda de electricidad (cada media hora, en MW)", subtitle = "Victoria-Australia")
#
dem_elec_vict %>% gg_season(Demanda, period="day") + theme(legend.position = "none")
dem_elec_vict %>% gg_season(Demanda, period="week") + theme(legend.position = "none")
dem_elec_vict %>% gg_season(Demanda, period="year")
#
elec_half_hourly %>%
ggplot(aes(x = Temperatura, y = Demanda)) +
geom_point() +
ylab("Demanda (MWh)") + xlab("Temperatura (ºC)")
#
dem_elec_vict %>%
ggplot(aes(x = Temperatura, y = Demanda)) +
geom_point() +
ylab("Demanda (MWh)") + xlab("Temperatura (ºC)")
View(dem_elec_vict)
#
dem_elec_vict %>%
pivot_longer(Demanda:Temperatura, names_to = "Series") %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
facet_grid(rows = vars(Series), scales = "free_y") +
labs(y = "")
View(dem_elec_vict)
# Separación por Fiesta
dem_elec_vict %>%
ggplot(aes(x = Temperatura, y = Demanda, col=Fiesta)) +
geom_point() +
ylab("Demanda (MWh)") + xlab("Temperatura (ºC)")
# Separación por día de la semana
dem_elec_vict %>%
ggplot(aes(x = Temperatura, y = Demanda, col=Dia_sem)) +
geom_point() +
ylab("Demanda (MWh)") + xlab("Temperatura (ºC)")
#
# Separación por días laborables
dem_elec_vict %>%
ggplot(aes(x = Temperatura, y = Demanda, col=Dia_lab)) +
geom_point() +
ylab("Demanda (MWh)") + xlab("Temperatura (ºC)")
#
dem_elec_vict %>%
pivot_longer(Demanda:Temperatura, names_to = "Series") %>%
ggplot(aes(x = Time, y = value)) +
geom_line() +
facet_grid(rows = vars(Series), scales = "free_y") +
labs(y = "")
#
dem_elec.1 <- dem_elec_vict %>%
model(TSLM(log(Demand) ~ Temperature + I(Temperature^2) + Dia_sem + Dia_lab)) %>%
report()
fit.dem_elec.1 %>% gg_tsresiduals()
#
# Consumo de electricidad en función de la temperatura (datos originales, cada media hora)
#
dem_elec.1 <- dem_elec_vict %>%
model(TSLM(log(Demanda) ~ Temperatura + I(Temperatura^2) + Dia_sem + Dia_lab)) %>%
report()
fit.dem_elec.1 %>% gg_tsresiduals()
dem_elec.1 %>% gg_tsresiduals()
str(dem_elec_vict)
dem_elec.2 <- dem_elec_vic %>%
model(ARIMA(Demanda ~ Temperatura + I(Temperatura^2) + Dia_sem + Dia_lab)) %>%
report()
#
dem_elec.2 <- dem_elec_vict %>%
model(ARIMA(Demanda ~ Temperatura + I(Temperatura^2) + Dia_sem + Dia_lab)) %>%
report()
rm(dem_elec.1)
rm(dem_elec.2)
View(dem_elec_vict)
model(TSLM(log(Demanda) ~ Temperatura + I(Temperatura^2) + Dia_sem + Dia_lab + Frio + Calor)) %>% report()
report(TSLM(log(Demanda) ~ Temperatura + I(Temperatura^2) + Dia_sem + Dia_lab + Frio + Calor)))
report(TSLM(log(Demanda) ~ Temperatura + I(Temperatura^2) + Dia_sem + Dia_lab + Frio + Calor))
dem_elec <- dem_elec_vict %>%
model(TSLM(log(Demanda) ~ Temperatura + I(Temperatura^2) + Dia_sem + Dia_lab + Frio + Calor)) %>%
report()
View(dem_elec_vict)
Xs_2W <- new_data(elec_daily, 14) %>%
mutate(
Temperatura = 26,
Dia_sem = "lun" ,
Dia_lab = TRUE,
Frio = FALSE,
Calor = FALSE,
)
Xs_2W <- new_data(dem_elec_vict, 1) %>%
mutate(
Temperatura = 26,
Dia_sem = "lun" ,
Dia_lab = TRUE,
Frio = FALSE,
Calor = FALSE,
)
View(Xs_2W)
orecast(dem_elec, Xs_2W)
forecast(dem_elec, Xs_2W) %>%
autoplot(dem_elec_vict) + ylab("Demanda electricidad (MWh)")
#
forecast(dem_elec, Xs_2W)
forecast(dem_elec, Xs_2W) %>%
autoplot(dem_elec_vict) + ylab("Demanda electricidad (MWh)")
#
# Consumo de electricidad en función de la temperatura (datos originales, cada media hora)
#
dem_elec <- dem_elec_vict %>%
model(TSLM(log(Demanda) ~ Temperatura + Dia_sem + Dia_lab + Frio + Calor)) %>%
report()
#
# Predicción para un lunes laborable, suponiendo una temparatura media de 26ª
# aunque podrían usarse predicciones del servicio de meteorología)
Xs_2W <- new_data(dem_elec_vict, 1) %>%
mutate(
Temperatura = 26,
Dia_sem = "lun" ,
Dia_lab = TRUE,
Frio = FALSE,
Calor = FALSE,
)
forecast(dem_elec, Xs_2W)
forecast(dem_elec, Xs_2W) %>%
autoplot(dem_elec_vict) + ylab("Demanda electricidad (MWh)")
#
View(Xs_2W)
# Consumo de electricidad en función de la temperatura (datos originales, cada media hora)
#
dem_elec <- dem_elec_vict %>%
model(TSLM(log(Demanda) ~ Temperatura + I(Temperatura^2) + Dia_sem + Dia_lab + Frio + Calor)) %>%
report()
#
# Predicción para un lunes laborable, suponiendo una temparatura media de 26ª
# aunque podrían usarse predicciones del servicio de meteorología)
Xs_2W <- new_data(dem_elec_vict, 1) %>%
mutate(
Temperatura = 26,
Dia_sem = "lun" ,
Dia_lab = TRUE,
Frio = FALSE,
Calor = FALSE,
)
forecast(dem_elec, Xs_2W[,2:6])
forecast(dem_elec, Xs_2W) %>%
autoplot(dem_elec_vict) + ylab("Demanda electricidad (MWh)")
#
summary(dem_elec_vict %>% lm(log(Demanda) ~ Temperatura + I(Temperatura^2) + Dia_sem + Dia_lab + Frio + Calor)
)
View(dem_elec_vict)
summary(lm(log(Demanda) ~ Temperatura + I(Temperatura^2) + Dia_sem + Dia_lab + Frio + Calor), data = dem_elec_vict)
dem.elec <- lm(log(Demanda) ~ Temperatura + I(Temperatura^2) + Dia_sem + Dia_lab + Frio + Calor, data = dem_elec_vict)
summary(dem.elec)
View(dem_elec)
View(Xs_2W)
View(dem_elec_vict)
View(Xs_2W)
class(Xs_2W)
pred_dem <- predict(dem.elec, Xs_2W[,2:6])
pred_dem
pred_dem_IC <- predict(dem.elec, Xs_2W[,2:6], interval = "confidence", level = 0.95)
pred_dem_IC
summary(dem.elec)
report(dem_elec)
Xs_1d <- new_data(dem_elec_vict, 1) %>%
mutate(Temperatura = 26, Dia_sem = "lun" , Dia_lab = TRUE, Frio = FALSE, Calor = FALSE)
dem.elec <- lm(log(Demanda) ~ Temperatura + I(Temperatura^2) + Dia_sem + Dia_lab + Frio + Calor, data = dem_elec_vict)
summary(dem.elec)
pred_dem_IC <- predict(dem.elec, Xs_1d[,2:6], interval = "confidence", level = 0.95)
pred_dem_IC
View(monedas)
tipos_camb <- monedas
