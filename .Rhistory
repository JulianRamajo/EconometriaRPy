import pandas as pd
flights = pd.read_csv("flights.csv")
flights = flights[flights['dest'] == "ORD"]
flights = flights[['carrier', 'dep_delay', 'arr_delay']]
flights = flights.dropna()
flights
import pandas as pd
flights = pd.read_csv("flights.csv")
flights = flights[flights['dest'] == "ORD"]
flights = flights[['carrier', 'dep_delay', 'arr_delay']]
flights = flights.dropna()
flights
print(r.flights.head(10))
import pandas as pd
import pandas as pd
flights = pd.read_csv("flights.csv")
flights = flights[flights['dest'] == "ORD"]
flights = flights[['carrier', 'dep_delay', 'arr_delay']]
flights = flights.dropna()
flights
import pandas
flights = pandas.read_csv("flights.csv")
flights = flights[flights['dest'] == "ORD"]
flights = flights[['carrier', 'dep_delay', 'arr_delay']]
flights = flights.dropna()
flights
print(r.flights.head(10))
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np
np.random.seed(0)
mu = 200
sigma = 25
x = np.random.normal(mu, sigma, size=100)
fig, (ax0, ax1) = plt.subplots(ncols=2, figsize=(8, 4))
ax0.hist(x, 20, density=1, histtype='stepfilled', facecolor='g', alpha=0.75)
ax0.set_title('stepfilled')
# Create a histogram by providing the bin edges (unequally spaced).
bins = [100, 150, 180, 195, 205, 220, 250, 300]
ax1.hist(x, bins, density=1, histtype='bar', rwidth=0.8)
ax1.set_title('unequal bins')
fig.tight_layout()
plt.show()
library(reticulate)
repl_python()
py_install("pandas-datareader")
repl_python()
install.packages(c("car", "effects", "ivreg", "lme4"))
install.packages("performance")
library(performance)
model1 <- lm(mpg ~ wt + cyl, data = mtcars)
model2 <- glm(am ~ wt + cyl, data = mtcars, family = binomial)
library(MASS)
data(housing)
model3 <- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)
library(lme4)
model4 <- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy)
library(brms)
model5 <- brm(mpg ~ wt + (1 | cyl) + (1 + wt | gear), data = mtcars)
install.packages("brm")
install.packages("brms")
check_heteroscedasticity(model1)
# defining a model
model <- lm(mpg ~ wt + am + gear + vs * cyl, data = mtcars)
# checking model assumptions
check_model(model)
install.packages("see")
# defining a model
model <- lm(mpg ~ wt + am + gear + vs * cyl, data = mtcars)
# checking model assumptions
check_model(model)
install.packages("qqplotr")
# defining a model
model <- lm(mpg ~ wt + am + gear + vs * cyl, data = mtcars)
# checking model assumptions
check_model(model)
install.packages(c("actuar", "autoplotly", "autostsm", "berryFunctions", "BGVAR", "bitops", "bookdown", "boot", "brio", "broom", "callr", "class", "cli", "clue", "cluster", "colorspace", "curl", "dbplyr", "dbscan", "DEoptim", "DescTools", "devtools", "diptest", "doBy", "dplyr", "DT", "ecm", "editData", "ellipsis", "esquisse", "exactRankTests", "formatR", "gamlss", "gh", "giscoR", "greybox", "GWmodel", "haven", "highr", "HLMdiag", "httpuv", "inum", "jquerylib", "KernSmooth", "knitr", "Lahman", "later", "lattice", "lwgeom", "magick", "mapsf", "MASS", "MASSExtra", "Matching", "Matrix", "mgcv", "mlr3misc", "modeltime", "muhaz", "multcomp", "nnet", "nycflights13", "odbc", "openssl", "parallelly", "pcaPP", "peopleanalyticsdata", "pillar", "pkgload", "processx", "R.cache", "raster", "rbibutils", "RcppArmadillo", "RcppParallel", "recipes", "remotes", "reprex", "reticulate", "rgl", "rlang", "Rmpfr", "RPostgres", "rsconnect", "RSQLite", "servr", "sfsmisc", "smcfcs", "spatial", "spatialreg", "spatstat", "spatstat.core", "spatstat.geom", "spdep", "splancs", "survival", "tibble", "tidymodels", "tidyselect", "tidyverse", "torch", "tsibble", "tune", "V8", "vctrs", "viridis", "viridisLite", "WDI", "withr", "WriteXLS", "xgboost"))
install.packages(c("actuar", "autoplotly", "autostsm", "berryFunctions", "BGVAR", "bitops", "bookdown", "boot", "brio", "broom", "callr", "class", "cli", "clue", "cluster", "colorspace", "curl", "dbplyr", "dbscan", "DEoptim", "DescTools", "devtools", "diptest", "doBy", "dplyr", "DT", "ecm", "editData", "ellipsis", "esquisse", "exactRankTests", "formatR", "gamlss", "gh", "giscoR", "greybox", "GWmodel", "haven", "highr", "HLMdiag", "httpuv", "inum", "jquerylib", "KernSmooth", "knitr", "Lahman", "later", "lattice", "lwgeom", "magick", "mapsf", "MASS", "MASSExtra", "Matching", "Matrix", "mgcv", "mlr3misc", "modeltime", "muhaz", "multcomp", "nnet", "nycflights13", "odbc", "openssl", "parallelly", "pcaPP", "peopleanalyticsdata", "pillar", "pkgload", "processx", "R.cache", "raster", "rbibutils", "RcppArmadillo", "RcppParallel", "recipes", "remotes", "reprex", "reticulate", "rgl", "rlang", "Rmpfr", "RPostgres", "rsconnect", "RSQLite", "servr", "sfsmisc", "smcfcs", "spatial", "spatialreg", "spatstat", "spatstat.core", "spatstat.geom", "spdep", "splancs", "survival", "tibble", "tidymodels", "tidyselect", "tidyverse", "torch", "tsibble", "tune", "V8", "vctrs", "viridis", "viridisLite", "WDI", "withr", "WriteXLS", "xgboost"))
library(reticulate)
miniconda_update()
py_install("scipy")
conda_python()
conda_version()
py_available()
py_config()
py_install("plotly")
repl_python()
setwd("~/Dropbox/Mi Mac (Mac Pro de Julián)/Documents/GitHub/EcoMetricsRPy")
repl_python()
