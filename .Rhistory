View(FANG_daily)
View(FANG_daily_returns)
# Get stock pairs
Mastercard_Visa <- c("MA", "V") %>%
tq_get(get  = "stock.prices",
from = "2015-01-01") %>%
group_by(symbol)
stock_pairs <- Mastercard_Visa %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "daily",
type       = "log",
col_rename = "returns") %>%
spread(key = symbol, value = returns)
View(Mastercard_Visa)
View(stock_pairs)
View(Mastercard_Visa)
View(stock_pairs)
View(Mastercard_Visa)
View(stock_pairs)
View(FANG)
View(FANG_daily)
FANG_pairs <- FAND_daily %>% tq_transmute(select = adjusted, mutate_fun = periodReturn, period = "daily", type = "log", col_rename = "returns") %>% spread(key = symbol, value = returns)
FANG_pairs <- FANG_daily %>% tq_transmute(select = adjusted, mutate_fun = periodReturn, period = "daily", type = "log", col_rename = "returns") %>% spread(key = symbol, value = returns)
View(FANG_pairs)
View(stock_pairs)
View(FANG_pairs)
FANG_pairs_2 <- FANG_daily %>% tq_transmute(select = adjusted, mutate_fun = periodReturn, period = "daily", type = "log", col_rename = "returns")
View(FANG_pairs_2)
View(FANG_daily_returns)
View(FANG_pairs)
FANG_pairs_3 <- FANG_daily %>% tq_transmute(select = adjusted, mutate_fun = periodReturn, period = "daily", type = "log")
View(FANG_pairs_3)
FANG_daily_returns_spread <- FANG_daily %>%
tq_transmute(select = adjusted, mutate_fun = periodReturn, period = "daily", type = "log") %>%
spread(key = symbol, value = daily.returns)
View(FANG_daily_returns_spread)
View(FANG_daily_returns)
?spread
FANG_daily_returns_spread_2 <- FANG_daily %>%
tq_transmute(select = adjusted, mutate_fun = periodReturn, period = "daily", type = "log") %>%
pivot_wider(names_from = symbol, values_from = daily.returns)
View(FANG_daily_returns_spread_2)
View(FANG_daily_returns_spread)
FANG_daily_returns_spread %>%
ggplot(aes(x = AMZN, y = FB)) +
geom_point(color = palette_light()[[1]], alpha = 0.5) +
geom_smooth(method = "lm") +
labs(title = "Visualizing Returns Relationship of Stock Pairs: Amazon versus Facebook") +
theme_tq()
#
FANG_daily_returns_spread %>%
ggplot(aes(x = AMZN, y = FB)) +
geom_point(color = palette_light()[[1]], alpha = 0.5) +
geom_smooth(method = "lm") +
labs(title = "Visualizing Returns Relationship of Stock Pairs: Facebook versus Amazon", x = "Amazon", y = "Facebook") +
theme_tq()
FANG_daily_returns_spread %>% lm(FB ~ AMZN) %>% summary()
lm(FB ~ AMZN, data = FANG_daily_returns_spread) %>%
summary()
# Variable (rolling regression)
reg_fun <- function(data) {
coef(lm(FB ~ AMZN, data = timetk::tk_tbl(data, silent = TRUE)))
}
coef_pairs <- FANG_daily_returns_spread %>%
tq_mutate(mutate_fun = rollapply,
width      = 90,
FUN        = reg_fun,
by.column  = FALSE,
col_rename = c("coef.0", "coef.1"))
coef_pairs
coef_pairs %>%
ggplot(aes(x = date, y = coef.1)) +
geom_line(size = 1, color = palette_light()[[1]]) +
geom_hline(yintercept = 0.6275, size = 1, color = palette_light()[[2]]) +
labs(title = "FB ~ AMZN: Visualizing Rolling Regression Coefficient", x = "") +
theme_tq()
View(stock_pairs)
View(coef_pairs)
View(FANG_daily_returns_spread)
View(FANG_daily_returns)
View(FANG_daily)
FANG_daily_returns %>%
mutate(wealth.index = 100 * cumprod(1 + daily.returns)) %>%
ggplot(aes(x = date, y = wealth.index, color = symbol)) +
geom_line(size = 1) +
labs(title = "FANG Stock Prices (2015-01-02)=100") +
theme_tq() +
scale_color_tq()
FANG_daily_returns %>%
mutate(price.index = 100 * cumprod(1 + daily.returns)) %>%
ggplot(aes(x = date, y = price.index, color = symbol)) +
geom_line(size = 1) +
labs(title = "FANG Stock Prices" , subtitle = "2015-01-02 = 100") +
theme_tq() +
scale_color_tq()
#
FANG_daily_returns %>%
mutate(price.index = 100 * cumprod(1 + daily.returns)) %>%
ggplot(aes(x = date, y = price.index, color = symbol)) +
geom_line(size = 1) +
labs(title = "FANG Stock Prices" , subtitle = "2015-01-02 = 100") +
theme_tq() +
scale_color_tq()
FANG_daily_returns_spread <- FANG_daily %>%
tq_transmute(select = adjusted, mutate_fun = periodReturn, period = "daily", type = "log") %>%
pivot_wider(names_from = symbol, values_from = daily.returns)
#
FANG_daily_returns_spread %>%
ggplot(aes(x = AMZN, y = NFLX)) +
geom_point(color = palette_light()[[1]], alpha = 0.5) +
geom_smooth(method = "lm") +
labs(title = "Visualizing Returns Relationship of Stock Pairs: Netflix versus Amazon", x = "Amazon", y = "Netflix") +
theme_tq()
# Reg. estándar
lm(NFLX ~ AMZN, data = FANG_daily_returns_spread) %>%
summary()
# Reg. cambiante (rolling regression)
reg_fun <- function(data) {
coef(lm(NFLX ~ AMZN, data = timetk::tk_tbl(data, silent = TRUE)))
}
coef_pairs <- FANG_daily_returns_spread %>%
tq_mutate(mutate_fun = rollapply,
width      = 90,
FUN        = reg_fun,
by.column  = FALSE,
col_rename = c("coef.0", "coef.1"))
coef_pairs
coef_pairs %>%
ggplot(aes(x = date, y = coef.1)) +
geom_line(size = 1, color = palette_light()[[1]]) +
geom_hline(yintercept = 0.7342, size = 1, color = palette_light()[[2]]) +
labs(title = "FB ~ AMZN: Visualizing Rolling Regression Slope Coefficient", x = "") +
theme_tq()
#
View(FANG_daily_returns)
FANG_daily_returns %>%
group_by(symbol) %>%
plot_anomaly_diagnostics(date, daily.returns, .facet_ncol = 3, .interactive = FALSE)
library(timetk)
FANG_daily_returns %>%
group_by(symbol) %>%
plot_anomaly_diagnostics(date, daily.returns, .facet_ncol = 3, .interactive = FALSE)
FANG_daily_returns %>% ggplot(aes(x = date, y = daily.returns, fill = symbol)) + geom_col() +
geom_hline(yintercept = 0, color = palette_light()[[1]]) +
scale_y_continuous(labels = scales::percent) +
labs(title = "FANG Daily Returns", subtitle = "(Log-returns)", y = "Daily Returns", x = "") +
facet_wrap(~ symbol, ncol = 2, scales = "free_y") +
theme_tq() +
scale_fill_tq()
#
FANG_daily_returns %>% ggplot(aes(x = daily.returns, fill = symbol)) +
geom_density(alpha = 0.5) +
labs(title = "FANG Daily LReturns",  subtitle = "(Log-returns)", x = "", y = "Density") +
theme_tq() +
scale_fill_tq() +
facet_wrap(~ symbol, ncol = 2)
#
library(timetk)
FANG_daily_returns %>%
group_by(symbol) %>%
plot_anomaly_diagnostics(date, daily.returns, .facet_ncol = 3, .interactive = FALSE)
#
AAPL_price  <- tq_get("AAPL", get = "stock.prices", from = " 1990-01-01")
AAPL_price
View(AAPL_price)
# librería timetk
AAPL_price %>%
plot_time_series(date, adjusted, .interactive = FALSE)
IPI_ESP <- tq_get("ESPPROINDMISMEI", get = "economic.data", from = " 1965-01-01")
IPI_ESP
View(IPI_ESP)
IPI_ESP %>%
plot_time_series(date, price, .interactive = FALSE)
IPI_ESP %>%
plot_anomaly_diagnostics(date, price, .facet_ncol = 3, .interactive = FALSE)
#
IPI_ESP %>%
plot_seasonal_diagnostics(date, price, .interactive = FALSE)
View(IPI_ESP)
tq_index("SP500")
SP500_top6 <- tq_index("SP500") %>%
slice(1:6) %>%
tq_get(get = "stock.prices")
View(SP500_top6)
SP500_top6 %>%  group_by(symbol) %>%
plot_time_series(date, adjusted, .interactive = FALSE)
SP500_top6_adj_prices <- SP500_top6 %>%
pivot_wider(names_from = symbol, values_from = adjusted)
View(SP500_top6_adj_prices)
View(FANG_annual_returns)
View(SP500_top6)
View(FANG_daily_returns_spread)
View(SP500_top6)
SP500_top6 %>%
pivot_wider(names_from = symbol, values_from = adjusted)
?pivot_wider
View(SP500_top6_adj_prices)
vignette("pivot")
rm(SP500_top6_adj_prices)
rm(stock_pairs)
rm(Mastercard_Visa)
rm(FANG_pairs_2)
rm(FANG_pairs_3)
View(SP500_top6)
SP500_top6 %>% pivot_wider(names_from = date, values_from = adjusted)
SP500_top6 %>% pivot_wider(names_from = symbol, values_from = adjusted)
View(SP500_top6)
SP500_top6
View(FANG_daily)
View(FANG_daily_returns_spread)
SP500_top6_prices <- SP500_top6 %>% as_tibble() %>% select(symbol, date, adjusted)
View(SP500_top6_prices)
SP500_top6_prices %>% pivot_wider(names_from = symbol, values_from = adjusted)
SP500_top5 <- tq_index("SP500") %>%
slice(1:5) %>%
tq_get(get = "stock.prices")
SP500_top5 %>%  group_by(symbol) %>%
plot_time_series(date, adjusted, .interactive = FALSE)
SP500_top5
SP500_top5_prices <- SP500_top5 %>%  select(symbol, date, adjusted)
SP500_top6_prices %>%
pivot_wider(names_from = symbol, values_from = adjusted)
View(SP500_top6_prices)
SP500_top6_spread <- SP500_top6_prices %>%
pivot_wider(names_from = symbol, values_from = adjusted)
View(SP500_top6_spread)
library(TSstudio)
ts_plot(SP500_top6_spread)
ts_plot(SP500_top6_spread, title = "Top 5 Stock Prices in SP500", Ytitle = "Index")
SP500_top5_spread <- SP500_top6_prices %>%
pivot_wider(names_from = symbol, values_from = adjusted)
#
library(TSstudio)
ts_plot(SP500_top5_spread, title = "Top 5 Stock Prices in SP500", Ytitle = "Index")
SP500_top5_spread <- SP500_top5_prices %>%
pivot_wider(names_from = symbol, values_from = adjusted)
#
library(TSstudio)
ts_plot(SP500_top5_spread, title = "Top 5 Stock Prices in SP500", Ytitle = "Index")
library(TSstudio)
ts_plot(SP500_top5_spread, title = "Top 5 Stock Prices in SP500", Ytitle = "Index")
# TSstudio
ts_seasonal(IPI_ESP, type = "all")
# TSstudio
ts_seasonal(IPI_ESP, type = "all")
library(TSstudio)
View(IPI_ESP)
View(SP500_top5_spread)
View(IPI_ESP)
# TSstudio
ts_seasonal(IPI_ESP, type = "all")
data(USgas)
USgas <-  data(USgas)
class(USgas)
help(USgas, package=TSstudio)
ts_plot(USgas)
USgas
IPI <- IPI_ESP[,2:3]
View(IPI)
ts_plot(IPI)
# TSstudio
ts_seasonal(IPI, type = "all")
?as.zoo.fts
?as.zoo
clas(IPI_ESP)
class(IPI_ESP)
IPI <- zoo(IPI_ESP$price, IPI_ESP$date)
class(IPI)
ts_plot(IPI)
# TSstudio
ts_seasonal(IPI, type = "all")
ts_heatmap(IPI_ESP)
ts_cor(IPI_ESP, lag.max = 36)
ts_cor(IPI, lag.max = 36)
library(tsbox)
IPI.zoo <- IPI
class(IPI.zoo)
IPI.ts <- ts_c(IPI.zoo)
class(IPI.ts)
IPI.ts <- ts_ts(IPI.zoo)
class(IPI.ts)
ts_cor(IPI.ts, lag.max = 36)
ts_lags(IPI.ts, lags = 1:6)
View(IPI_ESP)
IPI_s <- ts_split(ts.obj = IPI.ts, sample.out = 21)
train <-IPI_s$train
test <- IPI_s$test
# Forecasting with auto.arima
library(forecast)
md <- auto.arima(train)
fc <- forecast(md, h = 21)
# Plotting actual vs. fitted and forecasted
test_forecast(actual = IPI.ts, forecast.obj = fc, test = test)
plot_forecast(fc)
ts_info(IPI)
ts_info(IPI_ESP)
View(IPI_ESP)
ts_info(IPI.ts)
ts_surface(IPI.ts)
rm()
install.packages("Matrix")
install.packages("foreign")
install.packages("MSwM")
install.packages(c("foreign", "Matrix"))
install.packages("foreign")
install.packages("cowplot")
install.packages("data.table")
install.packages("ggplot2")
install.packages("rlang")
devtools::install_github("haleyjeppson/ggmosaic")
install.packages("rlang")
install.packages("data.table")
data.table::update.dev.pkg()
install.packages("pxR")
version()
library(garchFit)
library(fGarch)
?garchFit
?ts
library(nlWaldTest)
CESdata
attach(CESdata)
x1<-rnorm(30);x2<-rnorm(30);x3<-rnorm(30);y<-rnorm(30)
lm1a<-lm(y~x1+x2+x3)
nlConfint(lm1a, c("b[2]^3+b[3]*b[1]","b[2]"))
summary(lm1a)
require(nlme)
nl1<-nls(log(q)~c1+c2*log(c3*(k^c4)+(1-c3)*(l^c4)),data=CESdata,start=list(c1=-2.6,c2=1.8,c3=0.0001,c4=-6), nls.control(maxiter = 100, tol = 1e-05,minFactor = 1/2^15))
summary(nl1)
nl1<-nls(log(q)~c1+c2*log(c3*(k^c4)+(1-c3)*(l^c4)),data=CESdata,start=list(c1=-1,c2=1,c3=0.5,c4=0.5))
nl1<-nls(log(q)~c1+c2*log(c3*(k^c4)+(1-c3)*(l^c4)),data=CESdata,start=list(c1=-2.6,c2=1.8,c3=0.0001,c4=-6))
summary(nl1)
nlWaldtest(nl1,"b[2]-1/b[4]",0)
nlWaldtest(nl1,"b[2]*b[4]",1)
setwd("~/Documents/GitHub/EcoMetricsR")
library(readr)
GASOL_CRUDO <- read_csv("~/Documents/GitHub/EcoMetricsR/GASOL_CRUDO.csv")
View(GASOL_CRUDO)
ts_GASOL_CRUDO <- ts(GASOL_CRUDO[,2:5], start=c(2000,1), frequency = 52)
plot(ts_GASOL_CRUDO)
PCRUDO <- ts_GASOL_CRUDO[,"PCRUDO"]
PGASOL <- ts_GASOL_CRUDO[,"PGASOL"]
D2008JD <- ts_GASOL_CRUDO[,"D2008JD"]
time <- ts_GASOL_CRUDO[,"time"]
plot(PGASOL, PCRUDO, type = "p",)
plot(PCRUDO, PASOLC, type = "p",)
plot(PCRUDO, PGASOL, type = "p",)
View(ts_GASOL_CRUDO)
class(ts_GASOL_CRUDO)
head(ts_GASOL_CRUDO)
tail(ts_GASOL_CRUDO)
plot(PCRUDO, PGASOL, type = "p",)
plot(log(PCRUDO), log(PGASOL), type = "p")
library(dynlm)
DYN_model <- dynlm (log(PGASOL) ~ D2008JD + time + L(log(PGASOL), 1:2) + L(log(PCRUDO),0:2))
summary(DYN_model)
library(FinTS)
ArchTest(DYN_model, lags = 1:4)
ArchTest(DYN_model, lags = 1)
ArchTest(DYN_model, lag = 1)
ArchTest(DYN_model$residuals, lag = 1)
?ArchTest
ArchTest(DYN_model$residuals, lag = 2)
Engle_1 <-  ArchTest(DYN_model$residuals, lag = 1)
summary(Engle_1)
View(Engle_1)
summary(dynlm (DYN_model$residuals ~ I(L(DYN_model$residuals),1)^2))
dynlm(DYN_model$residuals ~ L(DYN_model$residuals)) L(DYN_model$residuals, 1:2)
dynlm( DYN_model$residuals ~ L(DYN_model$residuals, 1:1) )
summary(dynlm( DYN_model$residuals ~ L(DYN_model$residuals, 1:1)))
summary(dynlm(I(DYN_model$residuals^2) ~ L(DYN_model$residuals, 1:1)))
summary(dynlm(I(DYN_model$residuals^2) ~ I(L(DYN_model$residuals, 1:1)))^2)
summary(dynlm(I(DYN_model$residuals^2) ~ L(I(DYN_model$residuals^2), 1:1)))
ArchTest(DYN_model$residuals, lag = 1)
#
summary(dynlm(I(DYN_model$residuals^2) ~ L(I(DYN_model$residuals^2), 1:2)))
ArchTest(DYN_model$residuals, lag = 2)
ts.plot(PCRUDO)
ts.plot(PCRUDO, PGASOL)
ts.plot(log(PCRUDO), log(PGASOL))
View(ts_GASOL_CRUDO)
time <- ts_GASOL_CRUDO[,"time"]
plot(ts_GASOL_CRUDO)
library(tseries)
Resid.ARCH <- garch(DYN_model$residuals,c(0,2), trace=FALSE)
View(Resid.ARCH)
summary(Resid.ARCH)
plot(Resid.ARCH)
?garch
library(rugarch)
?ugarchspec
library(rugarch)
Resid_GARCH_spec <-  ugarchspec(
mean.model = list(armaOrder=c(0,0), include.mean = FALSE),
variance.model = list(model="sGARCH", garchOrder=c(0,2)),
distribution.model ="norm")
Resid_GARCH_fit <- ugarchfit(spec = Resid_GARCH_spec, data = DYN_model$residuals)
show(Resid_GARCH_fit)
plot(Resid_GARCH_fit)
library(rugarch)
Resid_GARCH_spec <-  ugarchspec(
mean.model = list(armaOrder=c(0,0), include.mean = FALSE),
variance.model = list(model="sGARCH", garchOrder=c(2,0)),
distribution.model ="norm")
Resid_GARCH_fit <- ugarchfit(spec = Resid_GARCH_spec, data = DYN_model$residuals)
show(Resid_GARCH_fit)
plot(Resid_GARCH_fit)
spec  <-  ugarchspec(mean.model = list(armaOrder = c(2, 0),
external.regressors = cbind(log(PCRUDO), lag(log(PCRUDO),1), lag(log(PPCRUDO),2))))
fit  <-  ugarchfit(spec=spec, data=log(PGASOL))
spec  <-  ugarchspec(mean.model = list(armaOrder = c(2, 0),
external.regressors = cbind(log(PCRUDO), lag(log(PCRUDO),1), lag(log(PCRUDO),2))))
fit  <-  ugarchfit(spec=spec, data=log(PGASOL))
show(fit)
spec  <-  ugarchspec(mean.model = list(armaOrder = c(2, 0),
external.regressors = cbind(log(PCRUDO), lag(log(PCRUDO),1), lag(log(PCRUDO),2))),
variance.model = list(model="sGARCH", garchOrder=c(2,0)))
fit  <-  ugarchfit(spec=spec, data=log(PGASOL))
show(fit)
?lag
Xs <- cbind(log(PCRUDO), lag(log(PCRUDO),1), lag(log(PCRUDO),2)))
Xs <- cbind(log(PCRUDO), lag(log(PCRUDO),1), lag(log(PCRUDO),2))
View(Xs)
class(Xs)
spec  <-  ugarchspec(mean.model = list(armaOrder = c(0, 0),
external.regressors = Xs),
variance.model = list(model="sGARCH", garchOrder=c(2,0)))
fit  <-  ugarchfit(spec=spec, data=log(PGASOL))
show(fit)
DYN_model <- dynlm (log(PGASOL) ~ D2008JD + time + L(log(PGASOL), 1:2) + L(log(PCRUDO),0:2))
summary(DYN_model)
library(nlWaldTest)
nlConfint(DYN_model, c("b[6]"))
nlConfint(DYN_model, c("(b[6]+b[7]+b[8])/(1-b[3]-b[4])","b[6]"))
nlConfint(DYN_model, c("(b[6]+b[7]+b[8])/(1-b[4]-b[5])","b[6]"))
nlWaldtest(DYN_model, c("(b[6]+b[7]+b[8])/(1-b[4]-b[5])","b[6]"))
nlConfint(DYN_model, c("(b[6]+b[7]+b[8])/(1-b[4]-b[5])","b[6]"))
nlWaldtest(DYN_model, "b[6]")
nlWaldtest(DYN_model, "(b[6]+b[7]+b[8])/(1-b[4]-b[5])")
nlConfint(DYN_model, c("b[6]","(b[6]+b[7]+b[8])/(1-b[4]-b[5])"))
summary(DYN_model)
ts.plot(Xs)
plot(Xs)
#
library(tidyverse)
GASOL_CRUDO <- read_csv("GASOL_CRUDO.csv")
#
ts_GASOL_CRUDO <- ts(GASOL_CRUDO[,2:5], start=c(2000,1), frequency = 52)
plot(ts_GASOL_CRUDO)
#
PCRUDO <- ts_GASOL_CRUDO[,"PCRUDO"]
PGASOL <- ts_GASOL_CRUDO[,"PGASOL"]
D2008JD <- ts_GASOL_CRUDO[,"D2008JD"]
time <- ts_GASOL_CRUDO[,"time"]
library(dynlm)
DYN_model <- dynlm (log(PGASOL) ~ D2008JD + time + L(log(PGASOL), 1:2) + L(log(PCRUDO),0:2))
summary(DYN_model)
View(GASOL_CRUDO)
#
library(nlWaldTest)
nlWaldtest(DYN_model, "b[6]")
nlWaldtest(DYN_model, "(b[6]+b[7]+b[8])/(1-b[4]-b[5])")
nlConfint(DYN_model, c("b[6]","(b[6]+b[7]+b[8])/(1-b[4]-b[5])"))
library(FinTS)
summary(dynlm(I(DYN_model$residuals^2) ~ L(I(DYN_model$residuals^2), 1:1)))
ArchTest(DYN_model$residuals, lag = 1)
#
summary(dynlm(I(DYN_model$residuals^2) ~ L(I(DYN_model$residuals^2), 1:2)))
ArchTest(DYN_model$residuals, lag = 2)
library(tseries)
Resid.ARCH <- garch(DYN_model$residuals,c(0,2), trace=FALSE)
summary(Resid.ARCH)
View(Resid.ARCH)
hhat <- ts(2*Resid.ARCH$fitted.values[-1,1]^2)
plot.ts(hhat)
library(rugarch)
Resid_GARCH_spec <-  ugarchspec(
mean.model = list(armaOrder=c(0,0), include.mean = FALSE),
variance.model = list(model="sGARCH", garchOrder=c(2,0)),
distribution.model ="norm")
Resid_GARCH_fit <- ugarchfit(spec = Resid_GARCH_spec, data = DYN_model$residuals)
show(Resid_GARCH_fit)
Resid.ARCH$fitted.values
hhat_1 <- ts(Resid.ARCH$fitted.values[,1]^2)
plot.ts(hhat_1)
hhat_2 <- ts(Resid_GARCH_fit@fit$sigma^2)
plot.ts(hhat_2)
ts.plot(Resid_GARCH_fit@fit$sigma^2)
plot(Resid_GARCH_fit)
Resid_DYN <- ts(DYN_model$residuals, start=c(2000,3), frequency = 52)
Resid.ARCH <- garch(Resid_DYN,c(0,2), trace=FALSE)
summary(Resid.ARCH)
ts.plot(Resid_DYN)
Resid.ARCH <- garch(Resid_DYN,c(0,2), trace=FALSE)
summary(Resid.ARCH)
resid_DYN <- ts(DYN_model$residuals, start=c(2000,3), frequency = 52)
ts.plot(resid_DYN)
resid.ARCH <- garch(resid_DYN,c(0,2), trace=FALSE)
summary(resid.ARCH)
hhat_1 <- ts(resid.ARCH$fitted.values[,1]^2)
plot.ts(hhat_1)
library(rugarch)
resid_GARCH_spec <-  ugarchspec(
mean.model = list(armaOrder=c(0,0), include.mean = FALSE),
variance.model = list(model="sGARCH", garchOrder=c(2,0)),
distribution.model ="norm")
resid_GARCH_fit <- ugarchfit(spec = resid_GARCH_spec, data = resid_DYN)
show(resid_GARCH_fit)
hhat_2 <- ts(resid_GARCH_fit@fit$sigma^2)
plot.ts(hhat_2) # ts.plot(Resid_GARCH_fit@fit$sigma^2)
plot(resid_GARCH_fit)
