install.packages("fpp3")
library(fpp3)
library(reticulate)
miniconda_update()
py_install("torch")
py_install("torch", pip=TRUE)
install.packages(c("gert", "insight", "RPostgreSQL", "survival"))
repl_python()
py_install("torchvision", pip = TRUE)
py_install("torchaudio", pip = TRUE)
repl_python()
library(reticulate)
py_install("pytorch", pip = TRUE)
py_install("pytorch")
py_install("tensorflow")
repl_python()
library(reticulate)
repl_python()
install.packages("DT")
library(DT)
datatable(iris)
class(iris)
datatable(iris, editable = 'cell')
install.packages("vcd")
install.packages("vcdExtra")
remotes::install_github("business-science/modeltime", dependencies = TRUE)
install.packages(c("brolgar", "datawizard", "gert", "httpuv", "ibdreg", "keras", "magick", "matlib", "packrat", "partykit", "RCurl", "rgl", "RJSONIO", "RPostgreSQL", "RSQLite", "see", "survival", "tensorflow", "torch", "XML"))
install.packages("tscopula")
library(tscopula)
data(bitcoin)
X <- (diff(log(bitcoin))[-1]) * 100 # log-returns (as percentages)
length(X)
plot(X, type = "h")
View(bitcoin)
View(X)
?plot
library(tidymodels)
library(modeltime)
library(tidyverse)
library(timetk)
data_tbl <- walmart_sales_weekly %>%
select(id, Date, Weekly_Sales) %>%
set_names(c("id", "date", "value"))
data_tbl
help("walmart_sales_weekly", package="timetk")
View(bitcoin)
View(data_tbl)
View(data_tbl)
?write_csv
class(bitcoin)
?write
bitcoin
head(bitcoin)
?saveRDS
saveRDS(bitcoin, file = "Bitcoin_2016_2019")
readRDS(Bitcoin_2016_2019)
setwd("~/")
readRDS(Bitcoin_2016_2019)
?readRDS
file <- tempfile("bitcoin", fileext = ".rds")
saveRDS(bitcoin, file)
readRDS("Bitcoin_2016_2019")
head(bitcoin)
BTCUSD <- readRDS("Bitcoin_2016_2019")
plot(BTCUSD)
plot(X)
data_tbl %>%
group_by(id) %>%
plot_time_series(
date, value, .interactive = F, .facet_ncol = 2
)
walmart_sales_weekly
data_tbl
View(data_tbl)
data_tbl %>%
select(id==1_1) %>%
plot_time_series(date, value, .interactive = F)
data_tbl %>%
filter(id == "1_1") %>%
plot_time_series(date, value, .interactive = F)
Store1_Department1 <-  data_tbl %>%
filter(id == "1_1")
View(Store1_Department1)
nested_data_tbl <- data_tbl %>%
# 1. Extending: We'll predict 52 weeks into the future.
extend_timeseries(
.id_var        = id,
.date_var      = date,
.length_future = 52
) %>%
# 2. Nesting: We'll group by id, and create a future dataset
#    that forecasts 52 weeks of extended data and
#    an actual dataset that contains 104 weeks (2-years of data)
nest_timeseries(
.id_var        = id,
.length_future = 52,
.length_actual = 143
) %>%
# 3. Splitting: We'll take the actual data and create splits
#    for accuracy and confidence interval estimation of 52 weeks (test)
#    and the rest is training data
split_nested_timeseries(
.length_test = 39
)
nested_data_tbl
rec_prophet <- recipe(value ~ date, training(nested_data_tbl$.splits[[1]]))
wflw_prophet <- workflow() %>%
add_model(
prophet_reg("regression", seasonality_yearly = TRUE) %>%
set_engine("prophet")
) %>%
add_recipe(rec_prophet)
rec_xgb <- recipe(value ~ ., training(nested_data_tbl$.splits[[1]])) %>%
step_timeseries_signature(date) %>%
step_rm(date) %>%
step_zv(all_predictors()) %>%
step_dummy(all_nominal_predictors(), one_hot = TRUE)
wflw_xgb <- workflow() %>%
add_model(boost_tree("regression") %>% set_engine("xgboost")) %>%
add_recipe(rec_xgb)
nested_modeltime_tbl <- modeltime_nested_fit(
# Nested data
nested_data = nested_data_tbl,
# Add workflows
wflw_prophet,
wflw_xgb
)
nested_modeltime_tbl
nested_modeltime_tbl %>%
extract_nested_test_accuracy() %>%
table_modeltime_accuracy(.interactive = F)
nested_modeltime_tbl %>%
extract_nested_test_forecast() %>%
group_by(id) %>%
plot_modeltime_forecast(
.facet_ncol  = 2,
.interactive = FALSE)
View(Store1_Department1)
nested_modeltime_tbl %>%
extract_nested_error_report()
best_nested_modeltime_tbl <- nested_modeltime_tbl %>%
modeltime_nested_select_best(
metric                = "rmse",
minimize              = TRUE,
filter_test_forecasts = TRUE
)
best_nested_modeltime_tbl
best_nested_modeltime_tbl %>%
extract_nested_best_model_report()
best_nested_modeltime_tbl %>%
extract_nested_test_forecast() %>%
group_by(id) %>%
plot_modeltime_forecast(
.facet_ncol  = 2,
.interactive = FALSE
)
nested_modeltime_refit_tbl <- best_nested_modeltime_tbl %>%
modeltime_nested_refit(control = control_nested_refit(verbose = TRUE))
nested_modeltime_refit_tbl
nested_modeltime_refit_tbl %>%
extract_nested_future_forecast() %>%
group_by(id) %>%
plot_modeltime_forecast(
.interactive = FALSE,
.facet_ncol  = 2)
remotes::install_github("business-science/timetk", dependencies = TRUE)
install.packages("RPostgreSQL")
library(fpp3)
autoplot(gold)
help("fpp3")
autoplot(us_gasoline)
tsoutliers::tso(us_gasoline)
class(us_gasoline)
autoplot(tsclean(us_gasoline))
tsoutliers::tso0(us_gasoline)
setwd("~/Dropbox/Mi Mac (Mac Pro de JuliaÃÅn)/Documents/GitHub/EconMetricsRPy/Z_APPS_COMP")
