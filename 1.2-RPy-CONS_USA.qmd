---
title: "TEMA 1: INTRODUCCIÓN A LA ECONOMETRÍA"
subtitle: "Aplicación 1.2 (Datos de series temporales): Consumo privado en Estados Unidos"
author: Julián Ramajo
excerpt: ""
draft: false
format: 
  html:
    theme: simplex
    self-contained: true
    max-width: 1920px
    code-fold: show
    code-tools: true
    highlight-style: atom-one-dark
    code-block-bg: "#282c34"
---

## Introducción

En esta aplicación se estimará una función de consumo agregada (consumidor representativo) de tipo Keynesiano con datos de series temporales para Estados Unidos durante el período 1959-2015 ( _t_ = 1, 2,..., 57):

$$
C_{t} = f(Y_{t}) + e_{t}
$$

donde *C* representa la consumo privado, e *Y* es la renta disponible (después de impuestos).

## Lectura de librerías (*packages*)

Librerías necesarias para la ejecución de la aplicación.

::: panel-tabset

## R

```{r}
library(tidyverse)
library(GGally)
library(skimr)
library(coefplot)
library(report)
```

## Python

```{python}
import numpy as np
import pandas as pd
import statsmodels.api as sm
import statsmodels.formula.api as smf
import matplotlib.pyplot as plt
```

:::

## Datos

Lectura y descripción de los datos.

::: panel-tabset

## R

Usando el método de trabajo `tidyverse` (<https://www.tidyverse.org/>).

```{r}
# Lectura de datos
CONS_USA <- read_delim("CONS_USA_ts.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
head(CONS_USA)
tail(CONS_USA)
#
# Asignación del formato de series temporales
# (https://cran.r-project.org/web/views/TimeSeries.html)
# Aquí se usará la clase básica "ts", válida para series temporales 
# regulares (espaciadas de forma homogénea en el tiempo).
# Pueden usarse otras clases más generales, siendo las más usadas:
# "zoo": https://cran.r-project.org/web/packages/zoo/index.html 
# "xts": https://github.com/joshuaulrich/xts
# "tsibble" (Ver Anexo 1 para una sencilla demostración)
#
ts_CONS_USA <- ts(CONS_USA, start=c(1959), end = c(2015))
# Análisis exploratorio (EDA)
# Estadística descriptiva
summary(ts_CONS_USA)
# Gráficas
#ts.plot(ts_CONS_USA[,"C"])
g1 <- ggplot(data = CONS_USA, aes(x = date)) +
  geom_line(aes(y = C), size = 0.5) +
  labs(y = "Consumo privado en Estados Unidos (millones US $)", x = "Año")
g1
#ts.plot(ts_CONS_USA[,"Y"])
g2 <- ggplot(data = CONS_USA, aes(x = date)) +
  geom_line(aes(y = Y), size = 0.5) +
  labs(y = "Renta disponible en Estados Unidos (millones US $)", x = "Año")
g2
#CONS_USA %>% ggplot(aes(x = Y, y = C)) + geom_point() + ylab("C") + xlab("Y")
g3 <- ggplot(CONS_USA, aes(x = Y, y = C)) + 
               geom_point() +  
               stat_smooth(method = lm) +  
               labs(x = "Renta disponible",y = "Consumo privado")
g3
```

## Python

Usando la librería `pandas` (<https://pandas.pydata.org/>).

```{python}
# Lectura de datos 
CONS_USA = pd.read_csv("CONS_USA_ts.csv", delimiter=';')
#
# Asignación del formato temporal 
# (https://pandas.pydata.org/docs/user_guide/timeseries.html#)
# Un análisis detallado puede encontrarse en la siguiente página web:
# https://jakevdp.github.io/PythonDataScienceHandbook/03.11-working-with-time-series.html
#
ts_CONS_USA = pd.read_csv("CONS_USA_ts.csv", delimiter=';', index_col=0)
ts_CONS_USA.head()
ts_CONS_USA.tail()
# Estadística descriptiva
ts_CONS_USA.describe()
# Gráficas
ts_CONS_USA["C"].plot()
plt.xlabel("Año")
plt.ylabel("Consumo privado en Estados Unidos (mill. US $)")
plt.show()
ts_CONS_USA["Y"].plot()
plt.xlabel("Año")
plt.ylabel("Renta disponible en Estados Unidos (mill. US $)")
plt.show()
plt.scatter(ts_CONS_USA["Y"], ts_CONS_USA["C"])
plt.xlabel("Renta disponible")
plt.ylabel("Consumo privado")
plt.show()
```

:::

## Regresiones por MCO

Se estimará por MCO el siguiente modelo de regresión lineal:

$$C_{t} = \beta_0 + \beta_1  Y_{t} + e_{t}$$

::: panel-tabset

## R

Comando `lm` de *R stats* (<https://rdrr.io/r/stats/lm.html>).

```{r}
KEYNES_model <- lm (formula = C ~ Y, data = ts_CONS_USA)
summary(KEYNES_model)
```

## Python

Comando `smf.ols` de la librería `statsmodels` (<https://www.statsmodels.org/>).

```{python}
model = smf.ols(formula = "C ~ Y", data = ts_CONS_USA)
KEYNES_model = model.fit()
print(KEYNES_model.summary())
```

:::
