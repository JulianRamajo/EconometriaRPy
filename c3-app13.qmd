---
engine: knitr
excerpt: ""
draft: false
format: 
  html:
    theme: simplex
    self-contained: true
    max-width: 1920px
    code-fold: show
    code-tools: true
    highlight-style: atom-one-dark
    code-block-bg: "#282c34"
---

```{css, echo = FALSE}
.justify { text-align: justify !important }
```

::: justify
# Aplicación 3.13 (Modelos econométricos para datos de panel): Productividad de la industria química en China {.unnumbered}

En esta aplicación se estimará una [función de producción del tipo Cobb-Douglas](https://en.wikipedia.org/wiki/Cobb%E2%80%93Douglas_production_function) para una muestra de empresas del sector industrial químico de China. La ecuación de regresión asociada a dicha función es la siguiente:

$$log(Y_{it}) = \beta_1 + \beta_2 log(K_{it}) + \beta_3 log(L_{it}) + \beta_4 log(M_{it})  + e_{it}$$

siendo $Y$ las ventas totales de cada empresa, $K$ el stock de capital físico, $L$ el número de empleados, y $M$ la cantidad de material usado para fabricar los productos químicos.
:::

## Código R {.unnumbered}

```{r}
#| include: true
#| warning: false
#| message: false

# Lectura de librerías
library(tidyverse)
library(stargazer)
library(plm)
# Lectura de datos
QUIM_CHINA <- read_csv("data/QUIM_CHINA.csv")
# Asignar estructura de panel de datos 
QUIM_CHINA_pdata  <-  pdata.frame(QUIM_CHINA,index=c("firm", "year"))
pdim(QUIM_CHINA_pdata)
summary(QUIM_CHINA_pdata[c("Y","K","L","M")])
# Modelos estáticos para datos de panel
# Modelo plano ('pool MCO`)
modelo_plano <- plm(log(Y) ~ log(K) + log(L) + log(M), 
                    data = QUIM_CHINA_pdata, model = "pooling")
summary(modelo_plano)
# Modelo de efectos individuales fijos (EF)
modelo_ef <- plm(log(Y) ~ log(K) + log(L) + log(M), 
                 data = QUIM_CHINA_pdata, model = "within")
summary(modelo_ef)
# Comparación del mdelo plano frente al modelo de efectos fijos
pFtest(modelo_ef, modelo_plano)
# Modelo de efectos individuales y temporales fijos (EF)
modelo_ef_it <- plm(log(Y) ~ log(K) + log(L) + log(M), 
                    data = QUIM_CHINA_pdata, 
                    model = "within", effect = "twoways")
summary(modelo_ef_it)
pFtest(modelo_ef_it, modelo_plano)
# Significación de efectos individuales
plmtest(modelo_plano, effect="individual")
plmtest(modelo_plano, effect = "time" )
plmtest(modelo_plano, effect = "twoways" )
# Modelo de efectos individuales aleatorios (EA)
modelo_ea <- plm(log(Y) ~ log(K) + log(L) + log(M), 
                 data = QUIM_CHINA_pdata, model = "random")
summary(modelo_ea)
# Contraste del modelo de efectos aleatorios frente al de efectos fijos: 
# Test de Hausman
phtest(modelo_ef, modelo_ea)
# Comparación de resultados de los tres modelos
stargazer(modelo_plano, modelo_ef, modelo_ea, type="text")
```

## Código Python {.unnumbered}

```{python}
#| include: true
#| warning: false
#| message: false

# Lectura de librerías 
import numpy as np
import pandas as pd
from linearmodels import PooledOLS, PanelOLS, RandomEffects
# Lectura de datos
QUIM_CHINA = pd.read_csv("data/QUIM_CHINA.csv")
# Estructura de panel de datos
QUIM_CHINA_pdata = QUIM_CHINA.set_index(['firm','year'])
QUIM_CHINA["Y"].describe()
QUIM_CHINA["K"].describe()
QUIM_CHINA["L"].describe()
QUIM_CHINA["M"].describe()
# Modelos estáticos para datos de panel
# Modelo plano
modelo_plano = PooledOLS.from_formula('np.log(Y) ~ 1 + np.log(K) + np.log(L) + np.log(M)', QUIM_CHINA_pdata)
res = modelo_plano.fit()
print(res)
# Modelo de efectos fijos
modelo_ef = PanelOLS.from_formula('np.log(Y) ~ 1 + np.log(K) + np.log(L) + np.log(M) + EntityEffects', QUIM_CHINA_pdata)
res = modelo_ef.fit()
print(res)
# Modelo de efectos aleatorios
modelo_ea = RandomEffects.from_formula('np.log(Y) ~ 1 + np.log(K) + np.log(L) + np.log(M)', QUIM_CHINA_pdata)
res = modelo_ea.fit()
print(res)
```
