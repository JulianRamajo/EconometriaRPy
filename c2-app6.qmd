---
engine: knitr
excerpt: ""
draft: false
format: 
  html:
    theme: simplex
    self-contained: true
    max-width: 1920px
    code-fold: show
    code-tools: true
    highlight-style: atom-one-dark
    code-block-bg: "#282c34"
---

```{css, echo = FALSE}
.justify { text-align: justify !important }
```

::: justify
# Aplicación 2.6 (Series temporales de alta frecuencia y estacionalidad): Demanda de electricidad en el estado de Victoria, Australia {.unnumbered}

En esta aplicación se estimará una función de demanda de electricidad para el estado de Victoria, en Australia. Se explicará el consumo de electricidad en función de la temperatura y de otras variables de control, usando datos semi-horarios (cada media hora) para el período 2012-2014.

Desde el punto de vista técnico se verán los problemas a los que se enfrenta el económetra al tratar con datos de frecuencia alta que además poseen distintos tipos de estacionalidad.
:::

## Código R {.unnumbered}

```{r}
#| include: true
#| warning: false
#| message: false

# Lectura de librerías
library(tidyverse)
library(car)
library(lmtest)
library(fpp3)
# Lectura de datos
load("data/DEM_ELEC.RData")
class(dem_elec_vict)
# Demanda de electricidad 2012-2014
dem_elec_vict %>% 
  autoplot(Demanda) +
  labs(title = "Demanda de electricidad (cada media hora, en MW)", subtitle = "Victoria-Australia")
# Estacionalidad(es) en la demanda: diaria, semanal y anual
dem_elec_vict %>% gg_season(Demanda, period="day") + theme(legend.position = "none")
dem_elec_vict %>% gg_season(Demanda, period="week") + theme(legend.position = "none")
dem_elec_vict %>% gg_season(Demanda, period="year")
# Consumo y temperatura en el período 2012-2014
dem_elec_vict %>%
  pivot_longer(Demanda:Temperatura, names_to = "Series") %>%
  ggplot(aes(x = Time, y = value)) +
  geom_line() +
  facet_grid(rows = vars(Series), scales = "free_y") +
  labs(y = "")
# Consumo versus temperatura
dem_elec_vict %>%
  ggplot(aes(x = Temperatura, y = Demanda)) +
  geom_point() +
  ylab("Demanda (MWh)") + xlab("Temperatura (ºC)")
# Comportamiento en días festivos
dem_elec_vict %>%
  ggplot(aes(x = Temperatura, y = Demanda, col=Fiesta)) +
  geom_point() +
  ylab("Demanda (MWh)") + xlab("Temperatura (ºC)")
# Comportamiento en días laborables
dem_elec_vict %>%
  ggplot(aes(x = Temperatura, y = Demanda, col=Dia_lab)) +
  geom_point() +
  ylab("Demanda (MWh)") + xlab("Temperatura (ºC)")
# Comportamiento por día de la semana
dem_elec_vict %>%
  ggplot(aes(x = Temperatura, y = Demanda, col=Dia_sem)) +
  geom_point() +
  ylab("Demanda (MWh)") + xlab("Temperatura (ºC)")
# Comportamiento en días de frío (< 18ºC)
dem_elec_vict %>%
  ggplot(aes(x = Temperatura, y = Demanda, col=Frio)) +
  geom_point() +
  ylab("Demanda (MWh)") + xlab("Temperatura (ºC)")
# Comportamiento en días de calor (> 28ºC)
dem_elec_vict %>%
  ggplot(aes(x = Temperatura, y = Demanda, col=Calor)) +
  geom_point() +
  ylab("Demanda (MWh)") + xlab("Temperatura (ºC)")
# Modelo de demanda de electricidad
dem_elec <- lm(log(Demanda) ~ Temperatura + I(Temperatura^2) + Dia_sem + Dia_lab + Frio + Calor, 
               data = dem_elec_vict)
summary(dem_elec)
# Predicción de consumo para un lunes laborable, suponiendo una temparatura media de 26ª
# (podrían usarse predicciones del servicio de meteorología)
Xs_1d <- new_data(dem_elec_vict, 1) %>%
    mutate(Temperatura = 26, Dia_sem = "lun" , Dia_lab = TRUE, Frio = FALSE, Calor = FALSE)
pred_dem_IC <- predict(dem_elec, Xs_1d[,2:6], interval = "confidence", level = 0.95)
pred_dem_IC
exp(pred_dem_IC)
```

## Código Python {.unnumbered}

```{python}
#| include: true
#| warning: false
#| message: false

# Lectura de librerías
import numpy as np
import pandas as pd
import statsmodels.stats.api as sms
import statsmodels.formula.api as smf
import scipy as sp
import matplotlib.pyplot as plt
import seaborn as sns
# Lectura de datos
dem_elec_vict = pd.read_csv('data/DEM_ELEC.csv', index_col=0)
# Gráfica consumo versus temperatura
plt.figure(3)
plt.scatter(dem_elec_vict['Temperatura'], dem_elec_vict['Demanda'])
plt.xlabel('Temperatura')
plt.ylabel('Demanda')
plt.title('Consumo electricidad versus temperatura')
plt.grid(True)
plt.show()
# Modelo de demanda de electricidad
dem_elec = smf.ols('np.log(Demanda) ~ Temperatura + np.power(Temperatura,2) + Dia_sem + Dia_lab + Frio + Calor', data=dem_elec_vict).fit()
print(dem_elec.summary())
```
