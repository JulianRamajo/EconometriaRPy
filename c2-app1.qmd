---
engine: knitr
excerpt: ""
draft: false
format: 
  html:
    theme: simplex
    self-contained: true
    max-width: 1920px
    code-fold: show
    code-tools: true
    highlight-style: atom-one-dark
    code-block-bg: "#282c34"
---

```{css, echo = FALSE}
.justify { text-align: justify !important }
```

::: justify
# Aplicación 2.1: Regresiones con datos de corte transversal {.unnumbered}

## Demanda familiar de carne {.unnumbered}

En esta aplicación se estimará una función de demanda de carne con datos microeconómicos sobre 30 familias americanas ( *i* = 1, 2,..., 30):

$$Q_{i} = f(P_{i}, Y_{i}) + e_{i}$$

donde *Q* representa la cantidad demandada, *P* es el precio pagado por ella en el mercado y, finalmente, *Y* es la renta familiar neta disponible.

Desde el punto de vista técnico, en el ejemplo se utilizarán distintas funciones y librerías que permiten la estimación de modelos estadísticos. Concretamente, en el caso del lenguaje R se usa la función `lm()` (<https://rstudio.github.io/r-manuals/r-intro/Statistical-models-in-R.html>) para el ajuste del modelo lineal propuesto, y en el caso de Python se proponen tanto el uso de la librería estándar en este lenguaje de programación para la estimación de modelos estadísticos y econométricos, `statsmodels` (<https://www.statsmodels.org/>), como la librería `scikit-learn` ([https://scikit-learn.org/](#0){.uri}), si bien esta última está más especializada en técnicas generales de *machine learning*.
:::

## Código R {.unnumbered}

```{r}
#| include: true
#| warning: false
#| message: false

# Lectura de librerías
library(tidyverse)
library(GGally)
library(modelsummary)
library(skimr)
# Lectura de datos
DEM_CARNE <- read_csv("data/DEM_CARNE.csv")
# Descripción de la base muestral
dim(DEM_CARNE)
str(DEM_CARNE)
head(DEM_CARNE)
tail(DEM_CARNE)
# Análisis exploratorio (EDA)
# Estadística descriptiva
# Resultados estándar (R 'base')
summary(DEM_CARNE)
# Librería skimr (https://cran.r-project.org/web/packages/skimr/)
skim(DEM_CARNE)
# Librería modelsummary (https://modelsummary.com/)
datasummary_correlation(DEM_CARNE)
# Gráficas parciales
# Librería GGally
GGally::ggpairs(DEM_CARNE)
# Librería ggplot
ggplot(DEM_CARNE, aes(x = P, y = Q)) +
  geom_point() +
  geom_smooth(method='lm', formula = y~x, se = FALSE) +
  xlab("P (precio)") +
  ylab("Q (cantidad)") +
  theme_minimal()
ggplot(DEM_CARNE, aes(x = Y, y = Q)) +
  geom_point() +
  geom_smooth(method='lm', formula = y~x, se = FALSE) +
  xlab("Y (renta)") +
  ylab("Q (cantidad)") +
  theme_minimal()
# Regresión por MCO del modelo lineal Q = beta1 + beta2*P + beta3*Y + e
# Comando lm() de R-stats (<https://rdrr.io/r/stats/lm.html>).
lin_model <- lm(formula = Q ~ P + Y, data = DEM_CARNE)
# Resultados estándar (R base)
summary(lin_model)
# Resultados formateados (librería modelsummary)
modelsummary(lin_model)
modelplot(lin_model)
# ANEXO: Regresión por MCO del modelo propuesto en versión logarítmica
# log(Q) = beta1 + beta2*log(P) + beta3*log(Y) + e
log_model <- lm(formula = log(Q) ~ log(P) + log(Y), data = DEM_CARNE)
summary(log_model)
```

## Código Python {.unnumbered}

```{python}
#| include: true
#| warning: false
#| message: false

# Lectura de librerías
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from plotnine import *
# https://www.statsmodels.org/stable/api.html
import statsmodels.api as sm
import statsmodels.formula.api as smf
# https://scikit-learn.org/stable/modules/linear_model.html
from sklearn import linear_model
from sklearn.metrics import r2_score
# Lectura de datos
DEM_CARNE = pd.read_csv("data/DEM_CARNE.csv")
# Descripción de la base muestral
DEM_CARNE.shape
DEM_CARNE.info()
DEM_CARNE.head()
DEM_CARNE.tail()
# Análisis exploratorio (EDA)
# Estadística descriptiva
# Resultados estándar (Python 'base')
DEM_CARNE.describe()
# Librería Skimpy (https://aeturrell.github.io/skimpy/)
from skimpy import skim
skim(DEM_CARNE)
# Gráficas parciales
# Librería seaborn
sns.pairplot(data = DEM_CARNE, diag_kind = 'kde');
plt.show()
# Librería plotnine (ggplot en Python)
(ggplot(DEM_CARNE,aes('P','Q')) + 
geom_point() + 
geom_smooth(method='lm',se=False, color = "blue") + 
labs(x="P (precio)",y="Q (cantidad)") + theme_bw())
(ggplot(DEM_CARNE,aes('Y','Q')) + 
geom_point() + 
geom_smooth(method='lm',se=False, color = "blue") + 
labs(x="Y (renta)",y="Q (cantidad)") + theme_bw())
# Regresión por MCO del modelo lineal Q = beta1 + beta2*P + beta3*Y + e
# Comando `smf.ols` de la librería `statsmodels` 
# (<https://www.statsmodels.org/>)
model = smf.ols(formula = "Q ~ P + Y", data = DEM_CARNE)
lin_model_1 = model.fit()
print(lin_model_1.summary())
# Comando `linear_model` de la librería `scikit-learn` 
# (<https://scikit-learn.org/>)
lr = linear_model.LinearRegression()
lin_model_2 = lr.fit (X=DEM_CARNE[["P", "Y"]], y=DEM_CARNE["Q"])
print("Ordenada en el origen: \n", lin_model_2.intercept_)
print("Efectos marginales: \n", lin_model_2.coef_)
# ANEXO: Regresión por MCO del modelo propuesto en versión logarítmica
# log(Q) = beta1 + beta2*log(P) + beta3*log(Y) + e
model = smf.ols(formula = "np.log(Q) ~ np.log(P) + np.log(Y)", data = DEM_CARNE)
log_model = model.fit()
print(log_model.summary())
```

## Anexo: regresiones Bayesianas {.unnumbered}

::: justify
Aunque en este libro sólo se utilizará en el método frecuentista para la modelización econométrica, a continuación se estimará el modelo de demanda propuesto en esta aplicación usando métodos de estadística Bayesiana.

El objetivo no es mostrar los detalles teóricos de dicho enfoque, sino sólo presentar la principales librerías de R y Python que usan el método de estimación Bayesiano. Para una exposición reciente de los métodos estadísticos frecuentista y Bayesiano puede consultarse el libro de Inchausti, P. (2023): "*Statistical Modeling with R. A dual frequentist and Bayesian approach for life scientists*", Oxford University Press: <https://sites.google.com/view/statistical-modeling-with-r/home>.
:::

### Código R {.unnumbered}

```{r}
#| include: true
#| warning: false
#| message: false

# Lectura de librerías
library(tidyverse)
# Lectura de datos
DEM_CARNE <- read_csv("data/DEM_CARNE.csv")
# Regresión frecuentista
linFrec_model <- lm(formula = Q ~ P + Y, data = DEM_CARNE)
summary(linFrec_model)
# Regresión Bayesiana
# Enfoque STAN: https://mc-stan.org/
# Librería brms: https://paul-buerkner.github.io/brms/
library(brms)
get_prior(formula=Q ~ P + Y, data=DEM_CARNE, family=gaussian)
linBayes_model_1 <- brm(Q ~ P + Y,
            data = DEM_CARNE, family = gaussian, iter = 2000, chains = 4)
summary(linBayes_model_1)
bayes_R2(linBayes_model_1)
plot(linBayes_model_1)
plot(conditional_effects(linBayes_model_1))
# Enfoque INLA -> R-INLA Project: https://www.r-inla.org/
# Librería brinla: http://julianfaraway.github.io/brinla/ 
library(INLA)
library(brinla)
linBayes_model_3 <- inla(Q ~ P + Y, family = "gaussian", data = DEM_CARNE)
summary(linBayes_model_3)
bri.hyperpar.summary(linBayes_model_3)
bri.fixed.plot(linBayes_model_3)
bri.hyperpar.plot(linBayes_model_3)
```

### Código Python {.unnumbered}

```{python}
#| include: true
#| warning: false
#| message: false

# Lectura de librerías
import numpy as np
import pandas as pd
import statsmodels.api as sm
import statsmodels.formula.api as smf
import arviz as az
import bambi as bmb
import matplotlib.pyplot as plt
# Config
az.style.use("arviz-darkgrid")
plt.rcParams["figure.dpi"] = 300
# Lectura de datos
DEM_CARNE = pd.read_csv("data/DEM_CARNE.csv")
# Regresión frecuentista
model = smf.ols(formula = "Q ~ P + Y", data = DEM_CARNE)
linFrec = model.fit()
print(linFrec.summary())
# Regresión Bayesiana
# Librería Bambi: https://bambinos.github.io/bambi/
# Inicialización y ajuste del modelo
model = bmb.Model("Q ~ P + Y", DEM_CARNE)
linBayes = model.fit(draws=2000, chains=4)
# Inspección del modelo y priors
model
model.plot_priors(figsize = (14, 10))
plt.show()
az.summary(linBayes)
az.plot_trace(linBayes, compact=False)
plt.show()
```
