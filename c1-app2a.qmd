---
engine: knitr
excerpt: ""
draft: false
format: 
  html:
    theme: simplex
    self-contained: true
    max-width: 1920px
    code-fold: show
    code-tools: true
    highlight-style: atom-one-dark
    code-block-bg: "#282c34"
---

```{css, echo = FALSE}
.justify { text-align: justify !important }
```

::: justify
# Aplicación 1.2a (Gestión y representación gráfica de datos financieros): Propiedades estadísticas básicas de los activos bursátiles {.unnumbered}

El objetivo de esta aplicación es familiarizarse con la descarga, manejo y visualización de datos bursátiles procedentes de la plataforma [Yahoo!Finanzas](https://es.finance.yahoo.com/), así como entender las propiedades estadísticas básicas de las series temporales asociadas. 

Se usará el enfoque *tidyverse* para este tipo de datos, por lo que esta aplicación puede entenderse como un "análisis financiero ordenado" (*tidy finance*).
:::

## Código R {.unnumbered}

```{r}
#| include: true
#| warning: false
#| message: false

# Lectura de librerías
library(tidyverse)
library(tidyquant)
library(scales)
# Descarga de los datos de un activo bursátil desde Yahoo!Finanzas: APPLE
# Para acceder a los datos diarios del precio de las acciones 
# de Apple usamos el comando tq_get de la librería tidyquant.
# Solicitaremos los datos desde el año 2000 hasta la actualidad.
# https://es.finance.yahoo.com/quote/AAPL?p=AAPL&.tsrc=fin-srch
pAAPL <- tq_get("AAPL",
  get = "stock.prices",
  from = "2000-01-01",
  to = "2023-06-28"
)
pAAPL
# Gráfica de serie temporal: evolución temporal de los precios
pAAPL |>
  ggplot(aes(x = date, y = adjusted)) +
  geom_line() +
  labs(
    x = NULL,
    y = NULL,
    title = "Precio de las acciones de Apple desde el año 2000 (USD)"
  )
# Cálculo de los rendimientos netos diarios (returns):
# rAAPL = pAAPL/pAAPL(-1)-1
rAAPL <- pAAPL |>
  arrange(date) |>
  mutate(ret = adjusted / lag(adjusted) - 1) |>
  select(symbol, date, ret)
rAAPL
# Eliminación de datos perdidos (missing data)
rAAPL <- rAAPL |>
  drop_na(ret)
# Evolución temporal de las rentabilidades diarias
rAAPL |>
  ggplot(aes(x = date, y = ret)) +
  geom_line() +
  labs(
    x = NULL,
    y = NULL,
    title = "Rendimiento neto diario de las acciones de Apple"
  )
# Distribución de los rendimientos diarios (detección de asimetrías)
q5 <- quantile(rAAPL |> pull(ret), probs = 0.05)
q95 <- quantile(rAAPL |> pull(ret), probs = 0.95)
rAAPL |>
  ggplot(aes(x = ret)) +
  geom_histogram(bins = 100) +
  geom_vline(aes(xintercept = q5), linetype = "dashed") +
  geom_vline(aes(xintercept = q95), linetype = "dashed") +
  labs(
    x = NULL,
    y = NULL,
    title = "Distribución de los rendimientos diarios de Apple"
  ) +
  scale_x_continuous(labels = percent)
# Estadística resumen global
rAAPL |>
  summarize(across(
    ret,
    list(
      media = mean,
      desv_típica = sd,
      mínimo = min,
      máximo = max
    )
  ))
# Estadística resumen por año
rAAPL |>
  group_by(year = year(date)) |>
  summarize(across(
    ret,
    list(
      media = mean,
      desv_típica = sd,
      mínimo = min,
      máximo = max
    ),
    .names = "{.fn}"
  )) |>
  print(n = Inf)
```

## Código Python {.unnumbered}

```{python}
#| include: true
#| warning: false
#| message: false

# Lectura de librerías
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import yfinance as yf
import warnings
warnings.filterwarnings("ignore")
# Descarga de los datos diarios del precio de las acciones de Apple 
# Creación del ticker de Apple
AAPL = yf.Ticker("AAPL")
# Lectura de los datos para el período seleccionado
pAAPL = yf.download("AAPL", start="2000-01-01", end="2023-06-28")
print(pAAPL)
# Gráfica de serie temporal: evolución temporal de los precios
plt.figure(1)
plt.plot(pAAPL['Adj Close'])
plt.title('Precio de las acciones de Apple desde el año 2000 (USD)')
plt.show()
# Cálculo de los rendimientos netos diarios
def ret(x):
    x_change = (x/x.shift(1)-1)
    return x_change
pAAPL['ret'] = ret(pAAPL['Adj Close'])
pAAPL['ret']
# Eliminación de datos perdidos (missing data)
pAAPL = pAAPL.dropna()
# Evolución temporal de las rentabilidades diarias
plt.figure(2)
plt.plot(pAAPL['ret'])
plt.title('Rendimiento neto diario de las acciones de Apple')
plt.show()
# Distribución de los rendimientos diarios (detección de asimetrías)
plt.figure(3)
plt.hist(pAAPL['ret'], bins=100)
plt.title('Distribución de los rendimientos diarios de Apple')
plt.show()
# Estadística resumen global
est_res = pAAPL['ret'].agg({
    'media': 'mean',
    'desv_típica': 'std',
    'mínimo': 'min',
    'máximo': 'max'
})
est_res.round(4)
# Estadística resumen por año
pAAPL['year'] = pd.DatetimeIndex(pAAPL.index).year
est_anuales = pAAPL.groupby('year').agg({'ret': ['mean', 'std', 'min', 'max']})
est_anuales.round(4)
```
