---
engine: knitr
excerpt: ""
draft: false
format: 
  html:
    theme: simplex
    self-contained: true
    max-width: 1920px
    code-fold: show
    code-tools: true
    highlight-style: atom-one-dark
    code-block-bg: "#282c34"
---

```{css, echo = FALSE}
.justify { text-align: justify !important }
```

::: justify
# Aplicación 1.2a: Gestión y representación gráfica de datos financieros  {.unnumbered}

## Propiedades estadísticas básicas de los activos bursátiles {.unnumbered}

El objetivo de esta aplicación es familiarizarse con la descarga, manejo y visualización de datos bursátiles procedentes de la plataforma [Yahoo!Finanzas](https://es.finance.yahoo.com/), así como entender las propiedades estadísticas básicas de las series temporales asociadas.

Se usará el enfoque *tidyverse* para este tipo de datos, por lo que esta aplicación puede entenderse como un "análisis financiero ordenado" (*tidy finance*).
:::

## Código R {.unnumbered}

```{r}
#| include: true
#| warning: false
#| message: false

# Lectura de librerías
library(tidyverse)
library(tidyquant)
library(scales)
#
# Descarga de los datos de un activo bursátil desde Yahoo!Finanzas
#
# Para acceder a los datos diarios del precio de las acciones 
# se usa el comando tq_get de la librería tidyquant.
# Solicitaremos los datos del Banco Santander, S.A. (ticker: SAN.MC)
# desde el año 2000:
# https://es.finance.yahoo.com/quote/SAN.MC?p=SAN.MC&.tsrc=fin-srch
#
pSAN <- tq_get("SAN.MC",
  get = "stock.prices",
  from = "2000-01-01",
  to = "2023-12-31"
)
head(pSAN)
tail(pSAN)
# Gráfica de serie temporal: evolución temporal de los precios
pSAN |>
  ggplot(aes(x = date, y = adjusted)) +
  geom_line() +
  labs(
    x = NULL,
    y = NULL,
    title = "Precio de las acciones del Banco Santander (EUR)"
  )
# Cálculo de los rendimientos netos diarios (returns)
rSAN <- pSAN |>
  arrange(date) |>
  mutate(ret = 100*(adjusted / lag(adjusted) - 1)) |>
  select(symbol, date, ret)
head(rSAN)
tail(rSAN)
# Eliminación de datos perdidos (missing data)
rSAN <- rSAN |>
  drop_na(ret)
# Evolución temporal de las rentabilidades diarias
rSAN |>
  ggplot(aes(x = date, y = ret)) +
  geom_line() +
  labs(
    x = NULL,
    y = NULL,
    title = "Rendimiento de las acciones del Banco Santander (%)"
  )
# Distribución de los rendimientos diarios 
# (detección de asimetrías y exceso de curtosis)
q5 <- quantile(rSAN |> pull(ret), probs = 0.05)
q95 <- quantile(rSAN |> pull(ret), probs = 0.95)
rSAN |>
  ggplot(aes(x = ret)) +
  geom_histogram(bins = 100) +
  geom_vline(aes(xintercept = q5), linetype = "dashed") +
  geom_vline(aes(xintercept = q95), linetype = "dashed") +
  labs(
    x = NULL,
    y = NULL,
    title = "Distribución de los rendimientos del Banco Santander"
  ) +
  scale_x_continuous(labels = percent)
# Estadística resumen global
rSAN |>
  summarize(across(
    ret,
    list(
      media = mean,
      desv_típica = sd,
      mínimo = min,
      máximo = max
    )
  ))
# Estadística resumen por años
rSAN |>
  group_by(year = year(date)) |>
  summarize(across(
    ret,
    list(
      media = mean,
      desv_típica = sd,
      mínimo = min,
      máximo = max
    ),
    .names = "{.fn}"
  )) |>
  print(n = Inf)
```

```{r}
#| include: true
#| warning: false
#| message: false

# ANEXO: Librerías especializadas en el análisis de series temporales 
# y de datos financieros
#
# Lectura de librerías
library(tidyverse)
# tidyquant: https://business-science.github.io/tidyquant/
library(tidyquant)
# timetk: https://business-science.github.io/timetk/
library(timetk)
# TSstudio: https://ramikrispin.github.io/TSstudio/
library(TSstudio)
# Se puede usar también la librería tsbox: https://docs.ropensci.org/tsbox/
# library(tsbox)
#
# En el ejemplo vamos a trabajar con cuatro compañías del SP500:
# Facebook (Meta), Apple, Amazon, Netflix y Google (grupo FAANG)
#
tq_index_options()
SP500 <- tq_index("SP500")
head(SP500,10)
datos_FAANG <- tq_get(c("META", "AAPL", "AMZN", "NFLX", "GOOG"), 
                       get = "stock.prices", 
                       from = "2015-01-01", 
                       to = "2023-12-31")
# Series temporales de precios
datos_FAANG_ts <- datos_FAANG %>%
  group_by(symbol) %>%
  select(symbol, date, adjusted) %>%
  pivot_wider(names_from = symbol, values_from = adjusted)
ts_plot(datos_FAANG_ts, 
        title = "Precio de las acciones del grupo FAANG", 
        Ytitle = "USD")
# Rentabilidades diarias de las acciones
# Precios
FAANG_precios <- datos_FAANG %>% 
  group_by(symbol) %>% 
  select(symbol, date, adjusted)
FAANG_precios %>% 
  ggplot(aes(x = date, y = adjusted, color = symbol)) +
  geom_line(linewidth = 1) +
  labs(title = "Precio de las acciones del grupo FAANG",
       x = "Día", y = "Precios corregidos", color = "") +
  facet_wrap(~ symbol, ncol = 2, scales = "free_y") +
  theme_tq() + 
  scale_color_tq()
# Rentabilidades
FAANG_rentabilidades <- FAANG_precios %>% 
  group_by(symbol) %>% 
  tq_transmute(select = adjusted, mutate_fun = periodReturn, 
               period = "daily", type  = "log")
FAANG_rentabilidades %>% ggplot(aes(x = date, y = daily.returns, 
                                   fill = symbol)) + geom_col() +
  geom_hline(yintercept = 0, color = palette_light()[[1]]) +
  scale_y_continuous(labels = scales::percent) +
  labs(title = "Rendimiento de las acciones del grupo FAANG", 
       subtitle = "(Log-returns)", 
       y = "Rendimiento", x = "Día") + 
  facet_wrap(~ symbol, ncol = 2, scales = "free_y") +
  theme_tq() + 
  scale_fill_tq()
# Distribución de rendimientos
FAANG_rentabilidades %>% ggplot(aes(x = daily.returns, fill = symbol)) +
  geom_density(alpha = 0.5) +
  labs(title = "Distribución de los rendimientos diarios",  
       subtitle = "(Log-returns)", 
       x = "Día", y = "Densidad") +
  theme_tq() +
  scale_fill_tq() + 
  facet_wrap(~ symbol, ncol = 2)
# Anomalías (valores atípicos)
FAANG_rentabilidades %>%
  group_by(symbol) %>%
  plot_anomaly_diagnostics(date, daily.returns, 
                           .facet_ncol = 3, .interactive = FALSE)
# Si se quiere una periodicidad anual, mensual o semanal
# se puede usar el comando tq_transmute.
# Caso mensual:
FAANG_precios_m <- FAANG_precios %>%   
  tq_transmute(select     = adjusted, 
               mutate_fun = to.period, 
               period     = "months") # semanal: "weeks"
FAANG_precios_m %>% 
  ggplot(aes(x = date, y = adjusted, color = symbol)) +
  geom_line(linewidth = 1) +
  labs(title = "Precio de las acciones del grupo FAANG",
       x = "Mes", y = "Precios corregidos", color = "") +
  facet_wrap(~ symbol, ncol = 2, scales = "free_y") +
  theme_tq() + 
  scale_color_tq()
# Rendimientos anuales o mensuales (cambiar "yearly" por "monthly")
FAANG_rentabilidades_a <- FAANG_precios %>%
  group_by(symbol) %>%
  tq_transmute(select = adjusted, mutate_fun = periodReturn, 
               period = "yearly", type = "arithmetic")
FAANG_rentabilidades_a %>% ggplot(aes(x = date, 
                                    y = yearly.returns, 
                                    fill = symbol)) +
  geom_col() +
  geom_hline(yintercept = 0, color = palette_light()[[1]]) +
  scale_y_continuous(labels = scales::percent) +
  labs(title = "Rendimientos anuales del grupo FAANG", 
       y = "Rendimiento", x = "Año") + 
  facet_wrap(~ symbol, ncol = 2, scales = "free_y") +
  theme_tq() + 
  scale_fill_tq()
```

## Código Python {.unnumbered}

```{python}
#| include: true
#| warning: false
#| message: false

# Lectura de librerías
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from plotnine import *
from datetime import datetime
from mizani.formatters import percent_format
import yfinance as yf
import warnings
warnings.filterwarnings("ignore")
#
# Descarga de los datos diarios del precio de las acciones del Santander
#
# Creación del ticker del Banco Santander
SAN = yf.Ticker("SAN.MC")
# Lectura de los datos para el período seleccionado
pSAN = yf.download("SAN.MC", start="2000-01-01", end="2023-12-31")
print(pSAN)
pSAN = (pSAN.reset_index())
pSAN.head()
pSAN.tail()
# Gráfica de serie temporal: evolución temporal de los precios
(
  ggplot(pSAN, aes(y="Adj Close", x="Date")) 
  + geom_line() 
  + labs(x="Día", y="", title="Precio de las acciones del Banco Santander (EUR)")
)
# Cálculo de los rendimientos netos diarios
def ret(x):
    x_change = 100*(x/x.shift(1)-1)
    return x_change
pSAN['ret'] = ret(pSAN['Adj Close'])
pSAN['ret']
# Eliminación de datos perdidos (missing data)
pSAN = pSAN.dropna()
# Evolución temporal de las rentabilidades diarias
(
  ggplot(pSAN, aes(y="ret", x="Date"))
 + geom_line()
 + labs(x="Día", y="", 
 title="Rendimiento de las acciones del Banco Santander (%)")
)
# Distribución de los rendimientos diarios 
# (detección de asimetrías y exceso de curtosis)
q5 = pSAN["ret"].quantile(0.05)
q95 = pSAN["ret"].quantile(0.95)
(
  ggplot(pSAN, aes(x="ret"))
 + geom_histogram(bins=100)
 + geom_vline(aes(xintercept=q5), linetype="dashed")
 + geom_vline(aes(xintercept=q95), linetype="dashed")
 + labs(x=None, y=None, 
 title="Distribución de los rendimientos del Banco Santander")
 + scale_x_continuous(labels=percent_format())
)
# Estadística resumen global
est_res = pSAN['ret'].agg({
    'media': 'mean',
    'desv_típica': 'std',
    'mínimo': 'min',
    'máximo': 'max'
})
est_res.round(3)
# Estadística resumen por años
pSAN['year'] = pSAN["Date"].dt.year
est_anual = pSAN.groupby('year').agg({'ret': ['mean', 'std', 'min', 'max']})
est_anual.round(3)
```
