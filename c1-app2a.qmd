---
engine: knitr
excerpt: ""
draft: false
format: 
  html:
    theme: simplex
    self-contained: true
    max-width: 1920px
    code-fold: show
    code-tools: true
    highlight-style: atom-one-dark
    code-block-bg: "#282c34"
---

```{css, echo = FALSE}
.justify { text-align: justify !important }
```

::: justify
# Aplicación 1.2a: Gestión y representación gráfica de datos financieros  {.unnumbered}

## Propiedades estadísticas básicas de los activos bursátiles {.unnumbered}

El objetivo de esta aplicación es familiarizarse con la descarga, manejo y visualización de datos bursátiles procedentes de la plataforma [Yahoo!Finanzas](https://es.finance.yahoo.com/), así como entender las propiedades estadísticas básicas de las series temporales asociadas. 

Se usará el enfoque *tidyverse* para este tipo de datos, por lo que esta aplicación puede entenderse como un "análisis financiero ordenado" (*tidy finance*).
:::

## Código R {.unnumbered}

```{r}
#| include: true
#| warning: false
#| message: false

# Lectura de librerías
library(tidyverse)
library(tidyquant)
library(scales)
#
# Descarga de los datos de un activo bursátil desde Yahoo!Finanzas
#
# Para acceder a los datos diarios del precio de las acciones 
# se usa el comando tq_get de la librería tidyquant.
# Solicitaremos los datos del Banco Santander, S.A. (SAN.MC)
# desde el año 2000 hasta la fecha de realización de esta aplicación:
# https://es.finance.yahoo.com/quote/SAN.MC?p=SAN.MC&.tsrc=fin-srch
pSAN <- tq_get("SAN.MC",
  get = "stock.prices",
  from = "2000-01-01",
  to = "2023-11-28"
)
head(pSAN)
tail(pSAN)
# Gráfica de serie temporal: evolución temporal de los precios
pSAN |>
  ggplot(aes(x = date, y = adjusted)) +
  geom_line() +
  labs(
    x = NULL,
    y = NULL,
    title = "Precio de las acciones del Banco Santander desde el año 2000 (EUR)"
  )
# Cálculo de los rendimientos netos diarios (returns)
rSAN <- pSAN |>
  arrange(date) |>
  mutate(ret = adjusted / lag(adjusted) - 1) |>
  select(symbol, date, ret)
head(rSAN)
tail(rSAN)
# Eliminación de datos perdidos (missing data)
rSAN <- rSAN |>
  drop_na(ret)
# Evolución temporal de las rentabilidades diarias
rSAN |>
  ggplot(aes(x = date, y = ret)) +
  geom_line() +
  labs(
    x = NULL,
    y = NULL,
    title = "Rendimiento diario de las acciones del Banco Santarder"
  )
# Distribución de los rendimientos diarios (detección de asimetrías)
q5 <- quantile(rSAN |> pull(ret), probs = 0.05)
q95 <- quantile(rSAN |> pull(ret), probs = 0.95)
rSAN |>
  ggplot(aes(x = ret)) +
  geom_histogram(bins = 100) +
  geom_vline(aes(xintercept = q5), linetype = "dashed") +
  geom_vline(aes(xintercept = q95), linetype = "dashed") +
  labs(
    x = NULL,
    y = NULL,
    title = "Distribución de los rendimientos diarios del Banco Santander"
  ) +
  scale_x_continuous(labels = percent)
# Estadística resumen global
rSAN |>
  summarize(across(
    ret,
    list(
      media = mean,
      desv_típica = sd,
      mínimo = min,
      máximo = max
    )
  ))
# Estadística resumen por año
rSAN |>
  group_by(year = year(date)) |>
  summarize(across(
    ret,
    list(
      media = mean,
      desv_típica = sd,
      mínimo = min,
      máximo = max
    ),
    .names = "{.fn}"
  )) |>
  print(n = Inf)
```

## Código Python {.unnumbered}

```{python}
#| include: true
#| warning: false
#| message: false

# Lectura de librerías
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from plotnine import *
from datetime import datetime
from mizani.formatters import percent_format
import yfinance as yf
import warnings
warnings.filterwarnings("ignore")
#
# Descarga de los datos diarios del precio de las acciones del Santander
#
# Creación del ticker del Banco Santander
SAN = yf.Ticker("SAN.MC")
# Lectura de los datos para el período seleccionado
pSAN = yf.download("SAN.MC", start="2000-01-01", end="2023-11-28")
print(pSAN)
pSAN = (pSAN.reset_index())
pSAN.head()
pSAN.tail()
# Gráfica de serie temporal: evolución temporal de los precios
(
  ggplot(pSAN, aes(y="Adj Close", x="Date")) 
  + geom_line() 
  + labs(x="", y="", title="Precio de las acciones del Banco Santander desde el año 2000 (EUR)")
)
# Cálculo de los rendimientos netos diarios
def ret(x):
    x_change = (x/x.shift(1)-1)
    return x_change
pSAN['ret'] = ret(pSAN['Adj Close'])
pSAN['ret']
# Cálculo alternativo de la rentabilidad diaria
ret2 = (pSAN
  .sort_values("Date")
  .assign(ret2 = lambda x: x["Adj Close"].pct_change())
  .get(["Date", "ret2"])
)
ret2.head()
# Eliminación de datos perdidos (missing data)
pSAN = pSAN.dropna()
# Evolución temporal de las rentabilidades diarias
(
  ggplot(pSAN, aes(y="ret", x="Date"))
 + geom_line()
 + labs(x="", y="", title="Rendimiento diario de las acciones del Banco Santarder")
)
# Distribución de los rendimientos diarios (detección de asimetrías)
q5 = pSAN["ret"].quantile(0.05)
q95 = pSAN["ret"].quantile(0.95)
(
  ggplot(pSAN, aes(x="ret"))
 + geom_histogram(bins=100)
 + geom_vline(aes(xintercept=q5), linetype="dashed")
 + geom_vline(aes(xintercept=q95), linetype="dashed")
 + labs(x=None, y=None, title="Distribución de los rendimientos diarios del Banco Santander")
 + scale_x_continuous(labels=percent_format())
)
# Estadística resumen global
pSAN["ret"].describe()
# Selección de estadísticos y precisión
est_res = pSAN['ret'].agg({
    'media': 'mean',
    'desv_típica': 'std',
    'mínimo': 'min',
    'máximo': 'max'
})
est_res.round(4)
# Estadística resumen por año
pSAN["ret"].groupby(pSAN["Date"].dt.year).describe()
# Selección de estadísticos y precisión
pSAN['year'] = pSAN["Date"].dt.year
est_anual = pSAN.groupby('year').agg({'ret': ['mean', 'std', 'min', 'max']})
est_anual.round(4)
```
